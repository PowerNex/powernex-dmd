From 2c70c6002c40742af7482eb24df004566c7f18f3 Mon Sep 17 00:00:00 2001
From: Dan Printzell <xwildn00bx@gmail.com>
Date: Fri, 25 Aug 2017 02:11:14 +0200
Subject: [PATCH 1/4] Added PowerNex to the backend

Signed-off-by: Dan Printzell <xwildn00bx@gmail.com>
---
 src/ddmd/backend/backconfig.c            | 23 +++++++++++++++++++----
 src/ddmd/backend/cc.h                    |  4 ++--
 src/ddmd/backend/cdef.d                  |  4 +++-
 src/ddmd/backend/cdef.h                  | 26 ++++++++++++++++++++------
 src/ddmd/backend/cgcod.c                 |  2 +-
 src/ddmd/backend/cgelem.c                |  2 +-
 src/ddmd/backend/cgen.c                  |  2 +-
 src/ddmd/backend/cod1.c                  | 31 ++++++++++++++++---------------
 src/ddmd/backend/cod2.c                  |  6 +++---
 src/ddmd/backend/cod3.c                  | 24 ++++++++++++------------
 src/ddmd/backend/cod4.c                  |  6 +++---
 src/ddmd/backend/code_stub.h             |  2 +-
 src/ddmd/backend/code_x86.h              |  2 +-
 src/ddmd/backend/el.c                    | 14 +++++++-------
 src/ddmd/backend/elfobj.c                |  6 ++++--
 src/ddmd/backend/global.h                |  2 +-
 src/ddmd/backend/machobj.c               |  6 +++---
 src/ddmd/backend/obj.h                   |  2 +-
 src/ddmd/backend/optabgen.c              |  2 +-
 src/ddmd/backend/out.c                   |  2 +-
 src/ddmd/backend/token.h                 |  4 ++--
 src/ddmd/backend/ty.h                    |  6 +++---
 src/ddmd/backend/var.c                   |  2 +-
 src/ddmd/cond.d                          |  1 +
 src/ddmd/e2ir.d                          |  5 +++--
 src/ddmd/globals.d                       | 10 ++++++----
 src/ddmd/globals.h                       |  1 +
 src/ddmd/lib.d                           |  4 ++--
 src/ddmd/mars.d                          | 21 ++++++++++++++++-----
 src/ddmd/mars.h                          |  2 ++
 src/ddmd/target.d                        | 21 +++++++++++++--------
 src/ddmd/toir.d                          |  6 +++---
 test/fail_compilation/reserved_version.d |  4 +++-
 33 files changed, 157 insertions(+), 98 deletions(-)

diff --git a/src/ddmd/backend/backconfig.c b/src/ddmd/backend/backconfig.c
index ee97662c1..40fc5926e 100644
--- a/src/ddmd/backend/backconfig.c
+++ b/src/ddmd/backend/backconfig.c
@@ -196,6 +196,21 @@ void out_config_init(
         config.flags3 |= CFG3pic;
     config.objfmt = OBJ_ELF;
     config.ehmethod = EH_DM;
+#endif
+#if TARGET_POWERNEX
+		// Based on TARGET_LINUX
+		// 32bit is not supported!
+    config.exe = EX_POWERNEX64;
+		config.ehmethod = EH_DWARF;
+		config.fpxmmregs = TRUE;
+		config.avx = avx;
+    config.flags |= CFGnoebp;
+    if (!exe)
+    {
+        config.flags3 |= CFG3pic;
+        config.flags |= CFGalwaysframe; // PIC needs a frame for TLS fixups
+    }
+    config.objfmt = OBJ_ELF;
 #endif
     config.flags2 |= CFG2nodeflib;      // no default library
     config.flags3 |= CFG3eseqds;
@@ -336,7 +351,7 @@ void util_set32()
     _tysize[TYnullptr] = LONGSIZE;
     _tysize[TYnptr] = LONGSIZE;
     _tysize[TYnref] = LONGSIZE;
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     _tysize[TYldouble] = 12;
     _tysize[TYildouble] = 12;
     _tysize[TYcldouble] = 24;
@@ -363,7 +378,7 @@ void util_set32()
     _tyalignsize[TYnullptr] = LONGSIZE;
     _tyalignsize[TYnref] = LONGSIZE;
     _tyalignsize[TYnptr] = LONGSIZE;
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     _tyalignsize[TYldouble] = 4;
     _tyalignsize[TYildouble] = 4;
     _tyalignsize[TYcldouble] = 4;
@@ -401,7 +416,7 @@ void util_set64()
     _tysize[TYnullptr] = 8;
     _tysize[TYnptr] = 8;
     _tysize[TYnref] = 8;
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_OSX
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_OSX || TARGET_POWERNEX
     _tysize[TYldouble] = 16;
     _tysize[TYildouble] = 16;
     _tysize[TYcldouble] = 32;
@@ -424,7 +439,7 @@ void util_set64()
     _tyalignsize[TYnullptr] = 8;
     _tyalignsize[TYnptr] = 8;
     _tyalignsize[TYnref] = 8;
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     _tyalignsize[TYldouble] = 16;
     _tyalignsize[TYildouble] = 16;
     _tyalignsize[TYcldouble] = 16;
diff --git a/src/ddmd/backend/cc.h b/src/ddmd/backend/cc.h
index ea7a310c3..9b3918495 100644
--- a/src/ddmd/backend/cc.h
+++ b/src/ddmd/backend/cc.h
@@ -77,7 +77,7 @@ enum WM
         WM_badnumber    = 24,
         WM_ccast        = 25,
         WM_obsolete     = 26,
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         WM_skip_attribute   = 27, // skip GNUC attribute specification
         WM_warning_message  = 28, // preprocessor warning message
         WM_bad_vastart      = 29, // args for builtin va_start bad
@@ -106,7 +106,7 @@ enum LANG
 #include        "msgs2.h"
 #endif
 #include        "ty.h"
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
 #include        "../tk/mem.h"
 #else
 #include        "mem.h"
diff --git a/src/ddmd/backend/cdef.d b/src/ddmd/backend/cdef.d
index 906ecf127..46a7ec7cf 100644
--- a/src/ddmd/backend/cdef.d
+++ b/src/ddmd/backend/cdef.d
@@ -499,6 +499,7 @@ enum
     EX_SOLARIS64    = 0x200000,
     EX_OPENBSD      = 0x400000,
     EX_OPENBSD64    = 0x800000,
+    EX_POWERNEX64   = 0x1000000,
 }
 
 
@@ -506,7 +507,8 @@ enum
 enum exefmt_t EX_flat = EX_OS2 | EX_WIN32 | EX_LINUX | EX_WIN64 | EX_LINUX64 |
                          EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 |
                          EX_OPENBSD | EX_OPENBSD64 |
-                         EX_SOLARIS | EX_SOLARIS64;
+                         EX_SOLARIS | EX_SOLARIS64 |
+	                       EX_POWERNEX64;
 
 // All DOS executable types
 enum exefmt_t EX_dos =  EX_DOSX | EX_ZPM | EX_RATIONAL | EX_PHARLAP |
diff --git a/src/ddmd/backend/cdef.h b/src/ddmd/backend/cdef.h
index b0e8d0ad4..8ec898c56 100644
--- a/src/ddmd/backend/cdef.h
+++ b/src/ddmd/backend/cdef.h
@@ -27,6 +27,7 @@
         __FreeBSD__     FreeBSD
         __OpenBSD__     OpenBSD
         __sun           Solaris, OpenSolaris, SunOS, OpenIndiana, etc
+        __PowerNex__    PowerNex
         __OS2__         IBM OS/2
         DOS386          32 bit DOS extended executable
         DOS16RM         Rational Systems 286 DOS extender
@@ -141,6 +142,12 @@ One and only one of these macros must be set by the makefile:
  * with these goals, and should be fixed.
  */
 
+/*
+ * PowerNex Version
+ * -------------
+ * I have no clue what I'm doing, but I'm based the code on Linux. :)
+ */
+
 #ifndef CDEF_H
 #define CDEF_H  1
 
@@ -191,9 +198,14 @@ One and only one of these macros must be set by the makefile:
 #define TARGET_SOLARIS  0               // target is a Solaris executable
 #endif
 
+// Set to 1 using the makefile
+#ifndef TARGET_POWERNEX
+#define TARGET_POWERNEX 0               // target is a PowerNex executable
+#endif
+
 // This is the default
 #ifndef TARGET_WINDOS
-#define TARGET_WINDOS   (!(TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS))
+#define TARGET_WINDOS   (!(TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX))
 #endif
 
 #if __GNUC__
@@ -296,7 +308,7 @@ typedef long double longdouble;
 
 // Precompiled header variations
 #define MEMORYHX        (_WINDLL && _WIN32)     // HX and SYM files are cached in memory
-#define MMFIO           (_WIN32 || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __sun)  // if memory mapped files
+#define MMFIO           (_WIN32 || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __sun || __PowerNex__)  // if memory mapped files
 #define LINEARALLOC     _WIN32  // if we can reserve address ranges
 
 // H_STYLE takes on one of these precompiled header methods
@@ -519,7 +531,7 @@ enum
 #define REGMASK         0xFFFF
 
 // targ_llong is also used to store host pointers, so it should have at least their size
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_OSX || MARS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX || TARGET_OSX || MARS
 typedef targ_llong      targ_ptrdiff_t; /* ptrdiff_t for target machine  */
 typedef targ_ullong     targ_size_t;    /* size_t for the target machine */
 #else
@@ -542,14 +554,14 @@ typedef targ_uns        targ_size_t;    /* size_t for the target machine */
 #define OMFOBJ          TARGET_WINDOS
 #endif
 #ifndef ELFOBJ
-#define ELFOBJ          (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+#define ELFOBJ          (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 #endif
 #ifndef MACHOBJ
 #define MACHOBJ         TARGET_OSX
 #endif
 
 #define SYMDEB_CODEVIEW TARGET_WINDOS
-#define SYMDEB_DWARF    (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_OSX)
+#define SYMDEB_DWARF    (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX || TARGET_OSX)
 
 #define TOOLKIT_H
 
@@ -736,6 +748,7 @@ enum
     EX_SOLARIS64    = 0x200000,
     EX_OPENBSD      = 0x400000,
     EX_OPENBSD64    = 0x800000,
+    EX_POWERNEX64   = 0x1000000,
 };
 
 
@@ -743,7 +756,8 @@ enum
 const exefmt_t EX_flat = EX_OS2 | EX_WIN32 | EX_LINUX | EX_WIN64 | EX_LINUX64 |
                          EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 |
                          EX_OPENBSD | EX_OPENBSD64 |
-                         EX_SOLARIS | EX_SOLARIS64;
+                         EX_SOLARIS | EX_SOLARIS64 |
+                         EX_POWERNEX64;
 
 // All DOS executable types
 const exefmt_t EX_dos =  EX_DOSX | EX_ZPM | EX_RATIONAL | EX_PHARLAP |
diff --git a/src/ddmd/backend/cgcod.c b/src/ddmd/backend/cgcod.c
index 0769d094a..0c77211e5 100644
--- a/src/ddmd/backend/cgcod.c
+++ b/src/ddmd/backend/cgcod.c
@@ -2530,7 +2530,7 @@ reload:                                 /* reload result from memory    */
         case OPrelconst:
             cdrelconst(cdb,e,pretregs);
             break;
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         case OPgot:
             cdgot(cdb,e,pretregs);
             break;
diff --git a/src/ddmd/backend/cgelem.c b/src/ddmd/backend/cgelem.c
index c381a70c7..e4cd86eef 100644
--- a/src/ddmd/backend/cgelem.c
+++ b/src/ddmd/backend/cgelem.c
@@ -5009,7 +5009,7 @@ STATIC elem * elvalist(elem *e, goal_t goal)
 
 #endif
 
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
 
     assert(I64); // va_start is not an intrinsic on 32-bit
     // (OPva_start &va)
diff --git a/src/ddmd/backend/cgen.c b/src/ddmd/backend/cgen.c
index 60a5a2943..755c17897 100644
--- a/src/ddmd/backend/cgen.c
+++ b/src/ddmd/backend/cgen.c
@@ -951,7 +951,7 @@ void searchfixlist(symbol *s)
                 // resolve directly.
                 if (s->Sseg == p->Lseg &&
                     (s->Sclass == SCstatic ||
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
                      (!(config.flags3 & CFG3pic) && s->Sclass == SCglobal)) &&
 #else
                         s->Sclass == SCglobal) &&
diff --git a/src/ddmd/backend/cod1.c b/src/ddmd/backend/cod1.c
index b5b47cd66..b26dcce82 100644
--- a/src/ddmd/backend/cod1.c
+++ b/src/ddmd/backend/cod1.c
@@ -1265,7 +1265,7 @@ void getlvalue(CodeBuilder& cdb,code *pcs,elem *e,regm_t keepmsk)
     case FLextern:
         if (s->Sident[0] == '_' && memcmp(s->Sident + 1,"tls_array",10) == 0)
         {
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
             // Rewrite as GS:[0000], or FS:[0000] for 64 bit
             if (I64)
             {
@@ -1309,7 +1309,7 @@ void getlvalue(CodeBuilder& cdb,code *pcs,elem *e,regm_t keepmsk)
     case FLcsdata:
     case FLgot:
     case FLgotoff:
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     case FLtlsdata:
 #endif
     L3:
@@ -1863,11 +1863,12 @@ void getClibInfo(unsigned clib, symbol **ps, ClibInfo **pinfo)
         clib_inited = true;
     }
 
-    const unsigned ex_unix = (EX_LINUX   | EX_LINUX64   |
-                              EX_OSX     | EX_OSX64     |
-                              EX_FREEBSD | EX_FREEBSD64 |
-                              EX_OPENBSD | EX_OPENBSD64 |
-                              EX_SOLARIS | EX_SOLARIS64);
+    const unsigned ex_unix = (EX_LINUX     | EX_LINUX64   |
+                              EX_OSX       | EX_OSX64     |
+                              EX_FREEBSD   | EX_FREEBSD64 |
+                              EX_OPENBSD   | EX_OPENBSD64 |
+                              EX_SOLARIS   | EX_SOLARIS64 |
+                              EX_POWERNEX64);
 
     ClibInfo *cinfo = &clibinfo[clib];
     symbol *s = clibsyms[clib];
@@ -1892,7 +1893,7 @@ void getClibInfo(unsigned clib, symbol **ps, ClibInfo **pinfo)
                 break;
             case CLIBldiv:
                 cinfo->retregs16 = mDX|mAX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__divdi3", mAX|mBX|mCX|mDX);
                     cinfo->flags = INFpushebx;
@@ -1918,7 +1919,7 @@ void getClibInfo(unsigned clib, symbol **ps, ClibInfo **pinfo)
                 break;
             case CLIBlmod:
                 cinfo->retregs16 = mCX|mBX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__moddi3", mAX|mBX|mCX|mDX);
                     cinfo->flags = INFpushebx;
@@ -1944,7 +1945,7 @@ void getClibInfo(unsigned clib, symbol **ps, ClibInfo **pinfo)
                 break;
             case CLIBuldiv:
                 cinfo->retregs16 = mDX|mAX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__udivdi3", mAX|mBX|mCX|mDX);
                     cinfo->flags = INFpushebx;
@@ -1970,7 +1971,7 @@ void getClibInfo(unsigned clib, symbol **ps, ClibInfo **pinfo)
                 break;
             case CLIBulmod:
                 cinfo->retregs16 = mCX|mBX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__umoddi3", mAX|mBX|mCX|mDX);
                     cinfo->flags = INFpushebx;
@@ -2531,7 +2532,7 @@ void callclib(CodeBuilder& cdb,elem *e,unsigned clib,regm_t *pretregs,regm_t kee
   else
   {
         code *cgot = NULL;
-        if (config.exe & (EX_LINUX | EX_FREEBSD | EX_OPENBSD | EX_SOLARIS))
+        if (config.exe & (EX_LINUX | EX_FREEBSD | EX_OPENBSD | EX_SOLARIS | EX_POWERNEX64))
         {
             // Note: not for OSX
             /* Pass EBX on the stack instead, this is because EBX is used
@@ -2556,7 +2557,7 @@ void callclib(CodeBuilder& cdb,elem *e,unsigned clib,regm_t *pretregs,regm_t kee
         }
         if (pushebx)
         {
-            if (config.exe & (EX_LINUX | EX_LINUX64 | EX_FREEBSD | EX_FREEBSD64))
+            if (config.exe & (EX_LINUX | EX_LINUX64 | EX_FREEBSD | EX_FREEBSD64 | EX_POWERNEX64))
             {
                 cdb.gen1(0x50 + CX);                             // PUSH ECX
                 cdb.gen1(0x50 + BX);                             // PUSH EBX
@@ -3374,7 +3375,7 @@ static void funccall(CodeBuilder& cdb,elem *e,unsigned numpara,unsigned numalign
                 fl = el_fl(e1);
             if (tym1 == TYifunc)
                 cdbe.gen1(0x9C);                             // PUSHF
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
             assert(!farfunc);
             if (s != tls_get_addr_sym)
             {
@@ -3413,7 +3414,7 @@ static void funccall(CodeBuilder& cdb,elem *e,unsigned numpara,unsigned numalign
         tym_t e11ty = tybasic(e11->Ety);
         assert(!I16 || (e11ty == (farfunc ? TYfptr : TYnptr)));
         cdb.append(load_localgot());
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         if (config.flags3 & CFG3pic && I32)
             keepmsk |= mBX;
 #endif
diff --git a/src/ddmd/backend/cod2.c b/src/ddmd/backend/cod2.c
index c83bce56f..a7d113fbd 100755
--- a/src/ddmd/backend/cod2.c
+++ b/src/ddmd/backend/cod2.c
@@ -908,7 +908,7 @@ void cdmul(CodeBuilder& cdb,elem *e,regm_t *pretregs)
             orthxmm(cdb,e,pretregs);
             return;
         }
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         orth87(cdb,e,pretregs);
 #else
         opdouble(cdb,e,pretregs,(oper == OPmul) ? CLIBdmul : CLIBddiv);
@@ -4144,7 +4144,7 @@ void getoffset(CodeBuilder& cdb,elem *e,unsigned reg)
         goto L4;
 
     case FLtlsdata:
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     {
       L5:
         if (config.flags3 & CFG3pic)
@@ -4270,7 +4270,7 @@ void getoffset(CodeBuilder& cdb,elem *e,unsigned reg)
         goto L4;
 
     case FLextern:
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         if (e->EV.sp.Vsym->ty() & mTYthread)
             goto L5;
 #endif
diff --git a/src/ddmd/backend/cod3.c b/src/ddmd/backend/cod3.c
index 0bda39538..646d2d711 100644
--- a/src/ddmd/backend/cod3.c
+++ b/src/ddmd/backend/cod3.c
@@ -629,7 +629,7 @@ regm_t regmask(tym_t tym, tym_t tyf)
             return mST0;
 
         case TYcfloat:
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
             if (I32 && tybasic(tyf) == TYnfunc)
                 return mDX | mAX;
 #endif
@@ -1435,7 +1435,7 @@ void doswitch(CodeBuilder& cdb, block *b)
         regm_t retregs = IDXREGS;
         if (dword)
             retregs |= mMSW;
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         if (I32 && config.flags3 & CFG3pic)
             retregs &= ~mBX;                            // need EBX for GOT
 #endif
@@ -1633,7 +1633,7 @@ void doswitch(CodeBuilder& cdb, block *b)
             genjmp(cdb,JNE,FLblock,b->nthSucc(0)); // JNE default
         }
         getregs(cdb,mCX|mDI);
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         if (config.flags3 & CFG3pic)
         {   // Add in GOT
             getregs(cdb,mDX);
@@ -1708,7 +1708,7 @@ void doswitch(CodeBuilder& cdb, block *b)
         const int mod = (disp > 127) ? 2 : 1;     // 1 or 2 byte displacement
         if (csseg)
             cdb.gen1(SEGCS);            // table is in code segment
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         if (config.flags3 & CFG3pic)
         {                               // ADD EDX,(ncases-1)*2[EDI]
             cdb.genc1(0x03,modregrm(mod,DX,7),FLconst,disp);
@@ -1778,7 +1778,7 @@ void outjmptab(block *b)
                         break;
                 }
         }
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         if (I64)
         {
             if (config.flags3 & CFG3pic)
@@ -2331,7 +2331,7 @@ void cdgot(CodeBuilder& cdb, elem *e, regm_t *pretregs)
     cdb.gen1(0x58 + reg);             // L1: POP reg
 
     fixresult(cdb,e,retregs,pretregs);
-#elif TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#elif TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     regm_t retregs = *pretregs & allregs;
     if  (!retregs)
         retregs = allregs;
@@ -2366,7 +2366,7 @@ void cdgot(CodeBuilder& cdb, elem *e, regm_t *pretregs)
 
 code *load_localgot()
 {
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     if (config.flags3 & CFG3pic && I32)
     {
         if (localgot && !(localgot->Sflags & SFLdead))
@@ -2394,7 +2394,7 @@ code *load_localgot()
     return NULL;
 }
 
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
 /*****************************
  * Returns:
  *      # of bytes stored
@@ -2998,7 +2998,7 @@ void prolog_frame(CodeBuilder& cdb, unsigned farfunc, unsigned* xlocalsize, bool
     if (config.wflags & WFincbp && farfunc)
         cdb.gen1(0x40 + BP);      // INC  BP
     if (config.target_cpu < TARGET_80286 ||
-        config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_WIN64) ||
+        config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_POWERNEX64 | EX_WIN64) ||
         !localsize ||
         config.flags & CFGstack ||
         (*xlocalsize >= 0x1000 && config.exe & EX_flat) ||
@@ -4287,7 +4287,7 @@ void cod3_thunk(Symbol *sthunk,Symbol *sfunc,unsigned p,tym_t thisty,
     sthunk->Soffset = thunkoffset;
     sthunk->Ssize = Offset(seg) - thunkoffset; // size of thunk
     sthunk->Sseg = seg;
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     objmod->pubdef(seg,sthunk,sthunk->Soffset);
 #endif
 #if TARGET_WINDOS
@@ -6528,7 +6528,7 @@ static void do64bit(MiniCodeBuf *pbuf, enum FL fl,union evc *uev,int flags)
             // un-named external with is the start of .rodata or .data
         case FLextern:                      /* external data symbol         */
         case FLtlsdata:
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         case FLgot:
         case FLgotoff:
 #endif
@@ -6638,7 +6638,7 @@ static void do32bit(MiniCodeBuf *pbuf, enum FL fl,union evc *uev,int flags, int
         // un-named external with is the start of .rodata or .data
     case FLextern:                      /* external data symbol         */
     case FLtlsdata:
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     case FLgot:
     case FLgotoff:
 #endif
diff --git a/src/ddmd/backend/cod4.c b/src/ddmd/backend/cod4.c
index 7581e6b37..b11560f19 100644
--- a/src/ddmd/backend/cod4.c
+++ b/src/ddmd/backend/cod4.c
@@ -819,7 +819,7 @@ void cdaddass(CodeBuilder& cdb,elem *e,regm_t *pretregs)
 
     if (tyfloating(tyml))
     {
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         if (op == OPnegass)
             cdnegass87(cdb,e,pretregs);
         else
@@ -1332,7 +1332,7 @@ void cdmulass(CodeBuilder& cdb,elem *e,regm_t *pretregs)
 
     if (tyfloating(tyml))
     {
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         opass87(cdb,e,pretregs);
 #else
         opassdbl(cdb,e,pretregs,op);
@@ -2747,7 +2747,7 @@ void cdcnvt(CodeBuilder& cdb,elem *e, regm_t *pretregs)
                     cdd_u32(cdb,e,pretregs);
                     return;
                 }
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
                 retregs = mST0;
 #else
                 retregs = DOUBLEREGS;
diff --git a/src/ddmd/backend/code_stub.h b/src/ddmd/backend/code_stub.h
index f7f79bbc1..c190f2114 100644
--- a/src/ddmd/backend/code_stub.h
+++ b/src/ddmd/backend/code_stub.h
@@ -49,7 +49,7 @@
 #define DOUBLEREGS_16 0
 #define BYTEREGS_INIT 0
 
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
 extern regm_t ALLREGS;
 extern regm_t BYTEREGS;
 #define ALLREGS_INIT            0
diff --git a/src/ddmd/backend/code_x86.h b/src/ddmd/backend/code_x86.h
index 013032e4f..429bd0deb 100644
--- a/src/ddmd/backend/code_x86.h
+++ b/src/ddmd/backend/code_x86.h
@@ -124,7 +124,7 @@ enum
 
 extern regm_t ALLREGS;
 extern regm_t BYTEREGS;
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     // To support positional independent code,
     // must be able to remove BX from available registers
 #define ALLREGS_INIT            (mAX|mBX|mCX|mDX|mSI|mDI)
diff --git a/src/ddmd/backend/el.c b/src/ddmd/backend/el.c
index 34da4cc24..6743b6f82 100644
--- a/src/ddmd/backend/el.c
+++ b/src/ddmd/backend/el.c
@@ -1165,7 +1165,7 @@ Lnodep:
 
 symbol *el_alloc_localgot()
 {
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     /* Since localgot is a local variable to each function,
      * localgot must be set back to NULL
      * at the start of code gen for each function.
@@ -1337,7 +1337,7 @@ elem *el_picvar(symbol *s)
     return e;
 }
 #endif
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
 
 elem *el_picvar(symbol *s)
 {   elem *e;
@@ -1532,13 +1532,13 @@ elem * el_var(symbol *s)
 
     //printf("el_var(s = '%s')\n", s->Sident);
     //printf("%x\n", s->Stype->Tty);
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     if (config.flags3 & CFG3pic &&
         !tyfunc(s->ty()))
         // Position Independent Code
         return el_picvar(s);
 #endif
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     if (config.flags3 & CFG3pic && tyfunc(s->ty()))
     {
         switch (s->Sclass)
@@ -1564,7 +1564,7 @@ elem * el_var(symbol *s)
         //printf("thread local %s\n", s->Sident);
 #if TARGET_OSX
         ;
-#elif TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#elif TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         /* For 32 bit:
          * Generate for var locals:
          *      MOV reg,GS:[00000000]   // add GS: override in back end
@@ -1683,7 +1683,7 @@ elem * el_var(symbol *s)
 {   elem *e;
 
     //printf("el_var(s = '%s')\n", s->Sident);
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     if (config.flags3 & CFG3pic && !tyfunc(s->ty()))
         return el_picvar(s);
 #endif
@@ -1774,7 +1774,7 @@ elem * el_ptr(symbol *s)
         return e;
     }
 #endif
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     if (config.flags3 & CFG3pic &&
         tyfunc(s->ty()))
         e = el_picvar(s);
diff --git a/src/ddmd/backend/elfobj.c b/src/ddmd/backend/elfobj.c
index 1666cfd72..44cbd93bf 100644
--- a/src/ddmd/backend/elfobj.c
+++ b/src/ddmd/backend/elfobj.c
@@ -54,6 +54,8 @@
 #  define ELFOSABI ELFOSABI_SYSV
 # elif TARGET_OPENBSD
 #  define ELFOSABI ELFOSABI_OPENBSD
+# elif TARGET_POWERNEX
+#  define ELFOSABI ELFOSABI_SYSV
 # else
 #  error "No ELF OS ABI defined.  Please fix"
 # endif
@@ -82,7 +84,7 @@ void addSegmentToComdat(segidx_t seg, segidx_t comdatseg);
  * If set the compiler requires full druntime support of the new
  * section registration.
  */
-#define REQUIRE_DSO_REGISTRY (DMDV2 && (TARGET_LINUX || TARGET_FREEBSD))
+#define REQUIRE_DSO_REGISTRY (DMDV2 && (TARGET_LINUX || TARGET_FREEBSD || TARGET_POWERNEX))
 
 /******
  * FreeBSD uses ELF, but the linker crashes with Elf comdats with the following message:
@@ -2235,7 +2237,7 @@ char *obj_mangle2(Symbol *s,char *dest, size_t *destlen)
             }
             break;
         case mTYman_std:
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
             if (tyfunc(s->ty()) && !variadic(s->Stype))
 #else
             if (!(config.flags4 & CFG4oldstdmangle) &&
diff --git a/src/ddmd/backend/global.h b/src/ddmd/backend/global.h
index b5a1f6603..185f47ccd 100644
--- a/src/ddmd/backend/global.h
+++ b/src/ddmd/backend/global.h
@@ -488,7 +488,7 @@ void dwarf_CFA_set_reg_offset(int reg, int offset);
 void dwarf_CFA_offset(int reg, int offset);
 void dwarf_CFA_args_size(size_t sz);
 
-// TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+// TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
 elem *exp_isconst();
 elem *lnx_builtin_next_arg(elem *efunc,list_t arglist);
 char *lnx_redirect_funcname(const char *);
diff --git a/src/ddmd/backend/machobj.c b/src/ddmd/backend/machobj.c
index 858f32df0..d34ce02e4 100644
--- a/src/ddmd/backend/machobj.c
+++ b/src/ddmd/backend/machobj.c
@@ -18,11 +18,11 @@
 #include        <fcntl.h>
 #include        <ctype.h>
 
-#if _WIN32 || __linux__
+#if _WIN32 || __linux__ || __PowerNex__
 #include        <malloc.h>
 #endif
 
-#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __sun
+#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __sun || __PowerNex__
 #include        <signal.h>
 #include        <unistd.h>
 #endif
@@ -2104,7 +2104,7 @@ char *obj_mangle2(Symbol *s,char *dest)
                 *p = toupper(*p);
             break;
         case mTYman_std:
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
             if (tyfunc(s->ty()) && !variadic(s->Stype))
 #else
             if (!(config.flags4 & CFG4oldstdmangle) &&
diff --git a/src/ddmd/backend/obj.h b/src/ddmd/backend/obj.h
index 15d85c479..cefb46340 100644
--- a/src/ddmd/backend/obj.h
+++ b/src/ddmd/backend/obj.h
@@ -96,7 +96,7 @@ class Obj
 
     static void gotref(symbol *s);
 
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     static unsigned addstr(Outbuffer *strtab, const char *);
     static symbol *getGOTsym();
     static void refGOTsym();
diff --git a/src/ddmd/backend/optabgen.c b/src/ddmd/backend/optabgen.c
index c20556ac2..0e1c0061b 100644
--- a/src/ddmd/backend/optabgen.c
+++ b/src/ddmd/backend/optabgen.c
@@ -1035,7 +1035,7 @@ void dotytab()
             case TYcldouble:
 #if TARGET_OSX
                 sz = 16;
-#elif TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#elif TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
                 sz = 4;
 #elif TARGET_WINDOS
                 sz = 2;
diff --git a/src/ddmd/backend/out.c b/src/ddmd/backend/out.c
index 72ad9b8d8..d691a0bc9 100644
--- a/src/ddmd/backend/out.c
+++ b/src/ddmd/backend/out.c
@@ -376,7 +376,7 @@ void dt_writeToObj(Obj& objmod, dt_t *dt, int seg, targ_size_t& offset)
                 if (tybasic(dt->Dty) == TYcptr)
                     objmod.reftocodeseg(seg,offset,dt->DTabytes);
                 else
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
                     objmod.reftodatseg(seg,offset,dt->DTabytes,dt->DTseg,flags);
 #else
                 /*else*/ if (dt->DTseg == DATA)
diff --git a/src/ddmd/backend/token.h b/src/ddmd/backend/token.h
index da86601e3..5c47bfc73 100644
--- a/src/ddmd/backend/token.h
+++ b/src/ddmd/backend/token.h
@@ -171,7 +171,7 @@ enum TK {
         TK_stdcall,
         TK_syscall,
         TK_try,
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         TK_attribute,
         TK_extension,
         TK_format,
@@ -203,7 +203,7 @@ enum TK {
         TKandand,TKshl,TKshr,TKrcur,TKeq,TKaddass,TKminass,TKmulass,TKdivass,
         TKmodass,TKshrass,TKshlass,TKandass,TKxorass,TKorass,TKsemi,
         TKadd,TKellipsis,
-#if !TX86 || TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if !TX86 || TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
         TKdollar,
 #endif
 
diff --git a/src/ddmd/backend/ty.h b/src/ddmd/backend/ty.h
index b2fce5a64..f1b52b650 100644
--- a/src/ddmd/backend/ty.h
+++ b/src/ddmd/backend/ty.h
@@ -180,7 +180,7 @@ enum
     mTYnothrow      = 0x00200000,    // nothrow function
 
     // Used only by C/C++ compiler
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     mTYnoret        = 0x01000000,    // function has no return
     mTYtransu       = 0x01000000,    // transparent union
 #else
@@ -194,7 +194,7 @@ enum
     mTYsyscall      = 0x40000000,
     mTYjava         = 0x80000000,
 
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     mTYTFF          = 0xFE000000,
 #else
     mTYTFF          = 0xFF000000,
@@ -319,7 +319,7 @@ inline unsigned tysimd(tym_t ty) { return tytab[ty & 0xFF] & TYFLsimd; }
 /* Array to give the 'relaxed' type for relaxed type checking   */
 extern unsigned char _tyrelax[];
 #define type_relax      (config.flags3 & CFG3relax)     // !=0 if relaxed type checking
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
 #define type_semirelax  (config.flags3 & CFG3semirelax) // !=0 if semi-relaxed type checking
 #else
 #define type_semirelax  type_relax
diff --git a/src/ddmd/backend/var.c b/src/ddmd/backend/var.c
index 665ba75ae..4f95852d5 100644
--- a/src/ddmd/backend/var.c
+++ b/src/ddmd/backend/var.c
@@ -57,7 +57,7 @@ int linkage_spec = 0;           /* using the default                    */
 #if MEMMODELS == 1
 tym_t functypetab[LINK_MAXDIM] =
 {
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX
     TYnfunc,
     TYnpfunc,
     TYnpfunc,
diff --git a/src/ddmd/cond.d b/src/ddmd/cond.d
index 1a034d1ef..9fb443f91 100644
--- a/src/ddmd/cond.d
+++ b/src/ddmd/cond.d
@@ -598,6 +598,7 @@ extern (C++) final class VersionCondition : DVCondition
             "Win32",
             "Win64",
             "linux",
+            "PowerNex",
             "OSX",
             "iOS",
             "TVOS",
diff --git a/src/ddmd/e2ir.d b/src/ddmd/e2ir.d
index 31e8f3ee1..cdc620a1a 100644
--- a/src/ddmd/e2ir.d
+++ b/src/ddmd/e2ir.d
@@ -290,7 +290,8 @@ private elem *callfunc(Loc loc,
         if ((global.params.isLinux ||
              global.params.isOSX ||
              global.params.isFreeBSD ||
-             global.params.isSolaris) && tf.linkage != LINKd)
+             global.params.isSolaris ||
+             global.params.isPowerNex) && tf.linkage != LINKd)
         {
                 // ehidden goes last on Linux/OSX C++
         }
@@ -1986,7 +1987,7 @@ elem *toElem(Expression e, IRState *irs)
                 {
                     ts = symbol_genauto(Type_toCtype(t1));
                     int rtl;
-                    if (global.params.isLinux || global.params.isFreeBSD || global.params.isSolaris ||
+                    if (global.params.isLinux || global.params.isFreeBSD || global.params.isSolaris || global.params.isPowerNex ||
                         global.params.is64bit && global.params.isWindows)
                         rtl = RTLSYM__DINVARIANT;
                     else
diff --git a/src/ddmd/globals.d b/src/ddmd/globals.d
index 25ae2c4dd..88aafcc8f 100644
--- a/src/ddmd/globals.d
+++ b/src/ddmd/globals.d
@@ -28,6 +28,7 @@ enum IN_GCC     = xversion!`IN_GCC`;
 enum TARGET_LINUX   = xversion!`linux`;
 enum TARGET_OSX     = xversion!`OSX`;
 enum TARGET_FREEBSD = xversion!`FreeBSD`;
+enum TARGET_POWERNEX = xversion!`PowerNex`;
 enum TARGET_OPENBSD = xversion!`OpenBSD`;
 enum TARGET_SOLARIS = xversion!`Solaris`;
 enum TARGET_WINDOS  = xversion!`Windows`;
@@ -90,6 +91,7 @@ struct Param
     bool is64bit;           // generate 64 bit code
     bool isLP64;            // generate code for LP64
     bool isLinux;           // generate code for linux
+    bool isPowerNex;        // generate code for PowerNex
     bool isOSX;             // generate code for Mac OSX
     bool isWindows;         // generate code for Windows
     bool isFreeBSD;         // generate code for FreeBSD
@@ -287,7 +289,7 @@ struct Global
         {
             obj_ext = "obj";
         }
-        else static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+        else static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             obj_ext = "o";
         }
@@ -299,7 +301,7 @@ struct Global
         {
             lib_ext = "lib";
         }
-        else static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+        else static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             lib_ext = "a";
         }
@@ -311,7 +313,7 @@ struct Global
         {
             dll_ext = "dll";
         }
-        else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+        else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             dll_ext = "so";
         }
@@ -327,7 +329,7 @@ struct Global
         {
             run_noext = false;
         }
-        else static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+        else static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             // Allow 'script' D source files to have no extension.
             run_noext = true;
diff --git a/src/ddmd/globals.h b/src/ddmd/globals.h
index 248ba1e81..7e1aa8b62 100644
--- a/src/ddmd/globals.h
+++ b/src/ddmd/globals.h
@@ -77,6 +77,7 @@ struct Param
     bool is64bit;       // generate 64 bit code
     bool isLP64;        // generate code for LP64
     bool isLinux;       // generate code for linux
+    bool isPowerNex;    // generate code for PowerNex
     bool isOSX;         // generate code for Mac OSX
     bool isWindows;     // generate code for Windows
     bool isFreeBSD;     // generate code for FreeBSD
diff --git a/src/ddmd/lib.d b/src/ddmd/lib.d
index 16e22ad29..03a0d0fbb 100644
--- a/src/ddmd/lib.d
+++ b/src/ddmd/lib.d
@@ -28,7 +28,7 @@ static if (TARGET_WINDOS)
     import ddmd.libomf;
     import ddmd.libmscoff;
 }
-else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     import ddmd.libelf;
 }
@@ -51,7 +51,7 @@ class Library
         {
             return (global.params.mscoff || global.params.is64bit) ? LibMSCoff_factory() : LibOMF_factory();
         }
-        else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+        else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             return LibElf_factory();
         }
diff --git a/src/ddmd/mars.d b/src/ddmd/mars.d
index 1e42a5e71..ab0158d8d 100644
--- a/src/ddmd/mars.d
+++ b/src/ddmd/mars.d
@@ -77,7 +77,7 @@ private void logo()
  */
 private  void usage()
 {
-    static if (TARGET_LINUX)
+    static if (TARGET_LINUX || TARGET_POWERNEX)
     {
         const(char)* fpic = "\n  -fPIC            generate position independent code";
     }
@@ -452,7 +452,7 @@ private int tryMain(size_t argc, const(char)** argv)
             }
             else if (strcmp(p + 1, "fPIC") == 0)
             {
-                static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+                static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
                 {
                     global.params.pic = 1;
                 }
@@ -1006,6 +1006,10 @@ Language changes listed by -transition=id:
                 version (OpenBSD)
                 {
                     browse("http://dlang.org/dmd-openbsd.html");
+                }
+								version (PowerNex)
+                {
+                    browse("http://powernex.net/dmd");
                 }
                 exit(EXIT_SUCCESS);
             }
@@ -1105,7 +1109,7 @@ Language changes listed by -transition=id:
     {
         global.params.pic = 1;
     }
-    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         if (global.params.lib && global.params.dll)
             error(Loc(), "cannot mix -lib and -shared");
@@ -1256,7 +1260,7 @@ Language changes listed by -transition=id:
                 libmodules.push(files[i]);
                 continue;
             }
-            static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+            static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
             {
                 if (FileName.equals(ext, global.dll_ext))
                 {
@@ -1905,7 +1909,7 @@ private void setDefaultLibrary()
             else
                 global.params.defaultlibname = "phobos";
         }
-        else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+        else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             global.params.defaultlibname = "libphobos2.a";
         }
@@ -1975,6 +1979,13 @@ private void addDefaultVersionIdentifiers()
         VersionCondition.addPredefinedGlobalIdent("ELFv1");
         global.params.isSolaris = true;
     }
+    else static if (TARGET_POWERNEX)
+    {
+        VersionCondition.addPredefinedGlobalIdent("Posix");
+        VersionCondition.addPredefinedGlobalIdent("PowerNex");
+        VersionCondition.addPredefinedGlobalIdent("ELFv1");
+        global.params.isPowerNex = true;
+    }
     else
     {
         static assert(0, "fix this");
diff --git a/src/ddmd/mars.h b/src/ddmd/mars.h
index 9ec4ed62e..01725d97e 100644
--- a/src/ddmd/mars.h
+++ b/src/ddmd/mars.h
@@ -41,6 +41,7 @@ Macros defined by the compiler, not the code:
         __FreeBSD__     FreeBSD
         __OpenBSD__     OpenBSD
         __sun           Solaris, OpenSolaris, SunOS, OpenIndiana, etc
+        __PowerNex__       PowerNex
 
 For the target systems, there are the target operating system and
 the target object file format:
@@ -52,6 +53,7 @@ the target object file format:
         TARGET_FREEBSD  Covers 32 and 64 bit FreeBSD
         TARGET_OPENBSD  Covers 32 and 64 bit OpenBSD
         TARGET_SOLARIS  Covers 32 and 64 bit Solaris
+        TARGET_POWERNEX Covers 64 bit PowerNex
 
     It is expected that the compiler for each platform will be able
     to generate 32 and 64 bit code from the same compiler binary.
diff --git a/src/ddmd/target.d b/src/ddmd/target.d
index 0593fb558..04cf6b1b3 100644
--- a/src/ddmd/target.d
+++ b/src/ddmd/target.d
@@ -83,7 +83,7 @@ struct Target
             ptrsize = 8;
             classinfosize = 0x98; // 152
         }
-        if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isSolaris)
+        if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isSolaris || global.params.isPowerNex)
         {
             realsize = 12;
             realpad = 2;
@@ -116,7 +116,7 @@ struct Target
             assert(0);
         if (global.params.is64bit)
         {
-            if (global.params.isLinux || global.params.isFreeBSD || global.params.isSolaris)
+            if (global.params.isLinux || global.params.isFreeBSD || global.params.isSolaris || global.params.isPowerNex)
             {
                 realsize = 16;
                 realpad = 6;
@@ -132,7 +132,7 @@ struct Target
         if (global.params.is64bit && global.params.isWindows)
             c_long_doublesize = 8;
 
-        cppExceptions = global.params.isLinux || global.params.isFreeBSD ||
+        cppExceptions = global.params.isLinux || global.params.isFreeBSD || global.params.isPowerNex ||
             global.params.isOSX;
     }
 
@@ -149,7 +149,7 @@ struct Target
         case Tcomplex80:
             return Target.realalignsize;
         case Tcomplex32:
-            if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isSolaris)
+            if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isSolaris || global.params.isPowerNex)
                 return 4;
             break;
         case Tint64:
@@ -157,7 +157,7 @@ struct Target
         case Tfloat64:
         case Timaginary64:
         case Tcomplex64:
-            if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isSolaris)
+            if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isSolaris || global.params.isPowerNex)
                 return global.params.is64bit ? 8 : 4;
             break;
         default:
@@ -219,6 +219,11 @@ struct Target
         {
             // sizeof(pthread_mutex_t) for Solaris.
             return 24;
+        }
+				else if (global.params.isPowerNex)
+        {
+            // sizeof(pthread_mutex_t) for PowerNex.
+            return 64;
         }
         assert(0);
     }
@@ -234,7 +239,7 @@ struct Target
         {
             return Type.tchar.pointerTo();
         }
-        else if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isSolaris || global.params.isOSX)
+        else if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isSolaris || global.params.isPowerNex || global.params.isOSX)
         {
             if (global.params.is64bit)
             {
@@ -436,7 +441,7 @@ struct Target
 
     extern (C++) static const(char)* toCppMangle(Dsymbol s)
     {
-        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
             return toCppMangleItanium(s);
         else static if (TARGET_WINDOS)
             return toCppMangleMSVC(s);
@@ -446,7 +451,7 @@ struct Target
 
     extern (C++) static const(char)* cppTypeInfoMangle(ClassDeclaration cd)
     {
-        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS)
+        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_SOLARIS || TARGET_POWERNEX)
             return cppTypeInfoMangleItanium(cd);
         else static if (TARGET_WINDOS)
             return cppTypeInfoMangleMSVC(cd);
diff --git a/src/ddmd/toir.d b/src/ddmd/toir.d
index d5354fd63..8c724aacc 100644
--- a/src/ddmd/toir.d
+++ b/src/ddmd/toir.d
@@ -993,7 +993,7 @@ Lagain:
         if (tns.ty != Tstruct)
         {
 L2:
-            if (global.params.isLinux && tf.linkage != LINKd && !global.params.is64bit)
+            if ((global.params.isLinux || global.params.isPowerNex) && tf.linkage != LINKd && !global.params.is64bit)
             {
                                                 // 32 bit C/C++ structs always on stack
             }
@@ -1020,7 +1020,7 @@ L2:
     if (tns.ty == Tstruct)
     {
         StructDeclaration sd = (cast(TypeStruct)tns).sym;
-        if (global.params.isLinux && tf.linkage != LINKd && !global.params.is64bit)
+        if ((global.params.isLinux || global.params.isPowerNex) && tf.linkage != LINKd && !global.params.is64bit)
         {
             if (sd.ident == Id.__c_long || sd.ident == Id.__c_ulong)
                 return RETregs;
@@ -1069,7 +1069,7 @@ L2:
         //printf("  3 RETstack\n");
         return RETstack;
     }
-    else if ((global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isSolaris) &&
+    else if ((global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isSolaris || global.params.isPowerNex) &&
              tf.linkage == LINKc &&
              tns.iscomplex())
     {
diff --git a/test/fail_compilation/reserved_version.d b/test/fail_compilation/reserved_version.d
index de23c461e..e571b6ebf 100644
--- a/test/fail_compilation/reserved_version.d
+++ b/test/fail_compilation/reserved_version.d
@@ -97,11 +97,11 @@ fail_compilation/reserved_version.d(196): Error: version identifier `D_Version2`
 fail_compilation/reserved_version.d(197): Error: version identifier `D_NoBoundsChecks` is reserved and cannot be set
 fail_compilation/reserved_version.d(200): Error: version identifier `all` is reserved and cannot be set
 fail_compilation/reserved_version.d(201): Error: version identifier `none` is reserved and cannot be set
+fail_compilation/reserved_version.d(202): Error: version identifier `PowerNex` is reserved and cannot be set
 ---
 */
 
 // Some extra empty lines to help fixup the manual line numbering after adding new version identifiers
-
 version = MSP430;
 version = D_P16;
 version = DigitalMars;
@@ -199,6 +199,7 @@ version = D_NoBoundsChecks;
 //version = assert;
 version = all;
 version = none;
+version = PowerNex;
 
 // This should work though
 debug = DigitalMars;
@@ -296,3 +297,4 @@ debug = all;
 debug = none;
 debug = D_P16;
 debug = MSP430;
+debug = PowerNex;
-- 
2.14.1

