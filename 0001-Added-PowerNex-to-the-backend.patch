From 6629239379f4948e574c5979ef5b296c6c06bc98 Mon Sep 17 00:00:00 2001
From: Dan Printzell <xwildn00bx@gmail.com>
Date: Sun, 2 Dec 2018 00:11:34 +0100
Subject: [PATCH 1/4] Added PowerNex to the backend

Signed-off-by: Dan Printzell <xwildn00bx@gmail.com>
---
 src/dmd/astbase.d                        |  2 +-
 src/dmd/backend/backconfig.d             | 25 +++++++++++++++++++----
 src/dmd/backend/cc.d                     |  4 ++--
 src/dmd/backend/cc.h                     |  4 ++--
 src/dmd/backend/cdef.d                   | 11 ++++++----
 src/dmd/backend/cdef.h                   | 26 ++++++++++++++++++------
 src/dmd/backend/cgcod.d                  |  4 ++--
 src/dmd/backend/cgelem.d                 |  2 +-
 src/dmd/backend/cod1.d                   | 23 +++++++++++----------
 src/dmd/backend/cod2.d                   |  6 +++---
 src/dmd/backend/cod3.d                   | 24 +++++++++++-----------
 src/dmd/backend/cod4.d                   |  6 +++---
 src/dmd/backend/code_stub.h              |  2 +-
 src/dmd/backend/code_x86.h               |  2 +-
 src/dmd/backend/dwarf.c                  |  2 +-
 src/dmd/backend/elem.d                   | 14 ++++++-------
 src/dmd/backend/elfobj.c                 |  6 ++++--
 src/dmd/backend/global.d                 |  2 +-
 src/dmd/backend/global.h                 |  2 +-
 src/dmd/backend/machobj.c                |  6 +++---
 src/dmd/backend/nteh.d                   |  2 +-
 src/dmd/backend/obj.h                    |  6 +++---
 src/dmd/backend/optabgen.d               |  2 +-
 src/dmd/backend/os.c                     | 20 ++++++++++++++----
 src/dmd/backend/out.d                    |  2 +-
 src/dmd/backend/strtold.c                |  4 ++--
 src/dmd/backend/token.h                  |  4 ++--
 src/dmd/backend/ty.d                     |  4 ++--
 src/dmd/backend/ty.h                     |  6 +++---
 src/dmd/cli.d                            |  5 +++++
 src/dmd/cond.d                           |  1 +
 src/dmd/dmsc.d                           |  3 ++-
 src/dmd/e2ir.d                           |  3 ++-
 src/dmd/globals.d                        | 10 +++++----
 src/dmd/globals.h                        |  1 +
 src/dmd/glue.d                           |  8 ++++----
 src/dmd/lib.d                            |  4 ++--
 src/dmd/mars.d                           | 21 +++++++++++++++----
 src/dmd/mars.h                           |  2 ++
 src/dmd/root/object.h                    |  2 +-
 src/dmd/target.d                         | 23 +++++++++++++--------
 src/dmd/tk/filespec.c                    | 14 ++++++-------
 src/dmd/tk/mem.c                         |  4 ++--
 test/fail_compilation/reserved_version.d |  3 +++
 44 files changed, 205 insertions(+), 122 deletions(-)

diff --git a/src/dmd/astbase.d b/src/dmd/astbase.d
index 13dc6c4ee..4433ed86b 100644
--- a/src/dmd/astbase.d
+++ b/src/dmd/astbase.d
@@ -6396,7 +6396,7 @@ struct ASTBase
                 return Type.tchar.pointerTo();
             }
             else if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD  || global.params.isDragonFlyBSD ||
-                global.params.isSolaris || global.params.isOSX)
+                global.params.isSolaris || global.params.isPowerNex || global.params.isOSX)
             {
                 if (global.params.is64bit)
                 {
diff --git a/src/dmd/backend/backconfig.d b/src/dmd/backend/backconfig.d
index a14e232d4..171a5f686 100644
--- a/src/dmd/backend/backconfig.d
+++ b/src/dmd/backend/backconfig.d
@@ -222,6 +222,23 @@ static if (TARGET_SOLARIS)
         config.flags3 |= CFG3pic;
     config.objfmt = OBJ_ELF;
     config.ehmethod = useExceptions ? EHmethod.EH_DM : EHmethod.EH_NONE;
+}
+static if (TARGET_POWERNEX)
+{
+    // Based on TARGET_LINUX
+    // 32bit is not supported!
+    config.exe = EX_POWERNEX64;
+    config.ehmethod = useExceptions ? EHmethod.EH_DWARF : EHmethod.EH_NONE;
+    config.fpxmmregs = true;
+    config.avx = avx;
+
+    config.flags |= CFGnoebp;
+    if (!exe)
+    {
+        config.flags3 |= CFG3pic;
+        config.flags |= CFGalwaysframe; // PIC needs a frame for TLS fixups
+    }
+    config.objfmt = OBJ_ELF;
 }
     config.flags2 |= CFG2nodeflib;      // no default library
     config.flags3 |= CFG3eseqds;
@@ -372,7 +389,7 @@ void util_set32()
     _tysize[TYnullptr] = LONGSIZE;
     _tysize[TYnptr] = LONGSIZE;
     _tysize[TYnref] = LONGSIZE;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     _tysize[TYldouble] = 12;
     _tysize[TYildouble] = 12;
@@ -406,7 +423,7 @@ else
     _tyalignsize[TYnullptr] = LONGSIZE;
     _tyalignsize[TYnref] = LONGSIZE;
     _tyalignsize[TYnptr] = LONGSIZE;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     _tyalignsize[TYldouble] = 4;
     _tyalignsize[TYildouble] = 4;
@@ -451,7 +468,7 @@ void util_set64()
     _tysize[TYnullptr] = 8;
     _tysize[TYnptr] = 8;
     _tysize[TYnref] = 8;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_OSX)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX || TARGET_OSX)
 {
     _tysize[TYldouble] = 16;
     _tysize[TYildouble] = 16;
@@ -479,7 +496,7 @@ else
     _tyalignsize[TYnullptr] = 8;
     _tyalignsize[TYnptr] = 8;
     _tyalignsize[TYnref] = 8;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     _tyalignsize[TYldouble] = 16;
     _tyalignsize[TYildouble] = 16;
diff --git a/src/dmd/backend/cc.d b/src/dmd/backend/cc.d
index 0a0ec85f8..7590393b8 100644
--- a/src/dmd/backend/cc.d
+++ b/src/dmd/backend/cc.d
@@ -58,7 +58,7 @@ enum WM
     WM_ccast        = 25,
     WM_obsolete     = 26,
 
-    // if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+    // if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
     WM_skip_attribute   = 27, // skip GNUC attribute specification
     WM_warning_message  = 28, // preprocessor warning message
     WM_bad_vastart      = 29, // args for builtin va_start bad
@@ -90,7 +90,7 @@ enum LANG
 //#include        "msgs2.h"
 //#endif
 //#include        "ty.h"
-//#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+//#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
 //#include        "../tk/mem.h"
 //#else
 //#include        "mem.h"
diff --git a/src/dmd/backend/cc.h b/src/dmd/backend/cc.h
index c97e3f117..f0b3bc0bc 100644
--- a/src/dmd/backend/cc.h
+++ b/src/dmd/backend/cc.h
@@ -77,7 +77,7 @@ enum WM
         WM_badnumber    = 24,
         WM_ccast        = 25,
         WM_obsolete     = 26,
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
         WM_skip_attribute   = 27, // skip GNUC attribute specification
         WM_warning_message  = 28, // preprocessor warning message
         WM_bad_vastart      = 29, // args for builtin va_start bad
@@ -106,7 +106,7 @@ enum LANG
 #include        "msgs2.h"
 #endif
 #include        "ty.h"
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
 #include        "../tk/mem.h"
 #else
 #include        "mem.h"
diff --git a/src/dmd/backend/cdef.d b/src/dmd/backend/cdef.d
index 65242bc0d..0df5ca5fd 100644
--- a/src/dmd/backend/cdef.d
+++ b/src/dmd/backend/cdef.d
@@ -50,6 +50,7 @@ version (XVERSION)
     enum TARGET_SOLARIS = xversion!`Solaris`;
     enum TARGET_WINDOS  = xversion!`Windows`;
     enum TARGET_DRAGONFLYBSD  = xversion!`DragonFlyBSD`;
+    enum TARGET_POWERNEX  = xversion!`PowerNex`;
 }
 
 
@@ -268,7 +269,7 @@ enum
 {
     CHARSIZE       = 1,
     SHORTSIZE      = 2,
-    WCHARSIZE      = 2,       // 2 for WIN32, 4 for linux/OSX/FreeBSD/OpenBSD/DragonFlyBSD/Solaris
+    WCHARSIZE      = 2,       // 2 for WIN32, 4 for linux/OSX/FreeBSD/OpenBSD/DragonFlyBSD/Solaris/PowerNex
     LONGSIZE       = 4,
     LLONGSIZE      = 8,
     CENTSIZE       = 16,
@@ -321,13 +322,13 @@ enum CV3 = 0;          // 1 means support CV3 debug format
 //#ifndef OMFOBJ
 //#define OMFOBJ          TARGET_WINDOS
 //#endif
-enum ELFOBJ = TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS;
+enum ELFOBJ = TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX;
 enum MACHOBJ = TARGET_OSX;
 
 version (XVERSION)
 {
     enum SYMDEB_CODEVIEW = TARGET_WINDOS;
-    enum SYMDEB_DWARF = TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_OSX;
+    enum SYMDEB_DWARF = TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX || TARGET_OSX;
 }
 
 //#define TOOLKIT_H
@@ -525,6 +526,7 @@ enum
     EX_OPENBSD      = 0x400000,
     EX_OPENBSD64    = 0x800000,
     EX_DRAGONFLYBSD64 = 0x1000000,
+    EX_POWERNEX64   = 0x2000000,
 }
 
 
@@ -533,7 +535,8 @@ enum exefmt_t EX_flat = EX_OS2 | EX_WIN32 | EX_LINUX | EX_WIN64 | EX_LINUX64 |
                          EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 |
                          EX_OPENBSD | EX_OPENBSD64 |
                          EX_DRAGONFLYBSD64 |
-                         EX_SOLARIS | EX_SOLARIS64;
+                         EX_SOLARIS | EX_SOLARIS64 |
+                         EX_POWERNEX64;
 
 // All DOS executable types
 enum exefmt_t EX_dos =  EX_DOSX | EX_ZPM | EX_RATIONAL | EX_PHARLAP |
diff --git a/src/dmd/backend/cdef.h b/src/dmd/backend/cdef.h
index f93f17e4c..a14dd04fa 100644
--- a/src/dmd/backend/cdef.h
+++ b/src/dmd/backend/cdef.h
@@ -28,6 +28,7 @@
         __OpenBSD__     OpenBSD
         __DragonFly__   DragonFlyBSD
         __sun           Solaris, OpenSolaris, SunOS, OpenIndiana, etc
+        __PowerNex__    PowerNex
         __OS2__         IBM OS/2
         DOS386          32 bit DOS extended executable
         DOS16RM         Rational Systems 286 DOS extender
@@ -159,6 +160,12 @@ One and only one of these macros must be set by the makefile:
  * with these goals, and should be fixed.
  */
 
+/*
+ * PowerNex Version
+ * -------------
+ * I have no clue what I'm doing, but I'm based the code on Linux. :)
+ */
+
 #ifndef CDEF_H
 #define CDEF_H  1
 
@@ -214,9 +221,14 @@ One and only one of these macros must be set by the makefile:
 #define TARGET_SOLARIS  0               // target is a Solaris executable
 #endif
 
+// Set to 1 using the makefile
+#ifndef TARGET_POWERNEX
+#define TARGET_POWERNEX 0               // target is a PowerNex executable
+#endif
+
 // This is the default
 #ifndef TARGET_WINDOS
-#define TARGET_WINDOS   (!(TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS))
+#define TARGET_WINDOS   (!(TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX))
 #endif
 
 #include <stdint.h>
@@ -321,7 +333,7 @@ typedef long double longdouble;
 
 // Precompiled header variations
 #define MEMORYHX        (_WINDLL && _WIN32)     // HX and SYM files are cached in memory
-#define MMFIO           (_WIN32 || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun)  // if memory mapped files
+#define MMFIO           (_WIN32 || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__)  // if memory mapped files
 #define LINEARALLOC     _WIN32  // if we can reserve address ranges
 
 // H_STYLE takes on one of these precompiled header methods
@@ -535,7 +547,7 @@ enum
 #define FPTRSIZE        _tysize[TYfptr]
 #define REGMASK         0xFFFF
 
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_OSX || MARS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX || TARGET_OSX || MARS
 typedef int64_t         targ_ptrdiff_t; /* ptrdiff_t for target machine  */
 typedef uint64_t        targ_size_t;    /* size_t for the target machine */
 #else
@@ -558,14 +570,14 @@ typedef targ_uns        targ_size_t;    /* size_t for the target machine */
 #define OMFOBJ          TARGET_WINDOS
 #endif
 #ifndef ELFOBJ
-#define ELFOBJ          (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+#define ELFOBJ          (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 #endif
 #ifndef MACHOBJ
 #define MACHOBJ         TARGET_OSX
 #endif
 
 #define SYMDEB_CODEVIEW TARGET_WINDOS
-#define SYMDEB_DWARF    (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_OSX)
+#define SYMDEB_DWARF    (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX || TARGET_OSX)
 
 #define TOOLKIT_H
 
@@ -754,6 +766,7 @@ enum
     EX_OPENBSD      = 0x400000,
     EX_OPENBSD64    = 0x800000,
     EX_DRAGONFLYBSD64 = 0x1000000,
+    EX_POWERNEX64   = 0x2000000,
 };
 
 
@@ -762,7 +775,8 @@ const exefmt_t EX_flat = EX_OS2 | EX_WIN32 | EX_LINUX | EX_WIN64 | EX_LINUX64 |
                          EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 |
                          EX_OPENBSD | EX_OPENBSD64 |
                          EX_DRAGONFLYBSD64 |
-                         EX_SOLARIS | EX_SOLARIS64;
+                         EX_SOLARIS | EX_SOLARIS64 |
+                         EX_POWERNEX64;
 
 // All DOS executable types
 const exefmt_t EX_dos =  EX_DOSX | EX_ZPM | EX_RATIONAL | EX_PHARLAP |
diff --git a/src/dmd/backend/cgcod.d b/src/dmd/backend/cgcod.d
index 1d0bc86c8..a9651346c 100644
--- a/src/dmd/backend/cgcod.d
+++ b/src/dmd/backend/cgcod.d
@@ -746,7 +746,7 @@ Lagain:
     spoff = 0;
     char guessneedframe = needframe;
     int cfa_offset = 0;
-//    if (needframe && config.exe & (EX_LINUX | EX_FREEBSD | EX_SOLARIS) && !(usednteh & (NTEH_try | NTEH_except | NTEHcpp | EHcleanup | EHtry | NTEHpassthru)))
+//    if (needframe && config.exe & (EX_LINUX | EX_FREEBSD | EX_SOLARIS || EX_POWERNEX64) && !(usednteh & (NTEH_try | NTEH_except | NTEHcpp | EHcleanup | EHtry | NTEHpassthru)))
 //      usednteh |= NTEHpassthru;
 
     /* Compute BP offsets for variables on stack.
@@ -2609,7 +2609,7 @@ reload:                                 /* reload result from memory    */
         case OPrelconst:
             cdrelconst(cdb,e,pretregs);
             break;
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         case OPgot:
             cdgot(cdb,e,pretregs);
diff --git a/src/dmd/backend/cgelem.d b/src/dmd/backend/cgelem.d
index 63c289249..cc2131fff 100644
--- a/src/dmd/backend/cgelem.d
+++ b/src/dmd/backend/cgelem.d
@@ -5043,7 +5043,7 @@ static if (TARGET_WINDOS)
 
 }
 
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     assert(I64); // va_start is not an intrinsic on 32-bit
     // (OPva_start &va)
diff --git a/src/dmd/backend/cod1.d b/src/dmd/backend/cod1.d
index 158327767..5b15a51cb 100644
--- a/src/dmd/backend/cod1.d
+++ b/src/dmd/backend/cod1.d
@@ -1312,7 +1312,7 @@ static if (0)
     case FLextern:
         if (s.Sident[0] == '_' && memcmp(s.Sident.ptr + 1,"tls_array".ptr,10) == 0)
         {
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
             // Rewrite as GS:[0000], or FS:[0000] for 64 bit
             if (I64)
@@ -1359,7 +1359,7 @@ else static if (TARGET_WINDOS)
     case FLcsdata:
     case FLgot:
     case FLgotoff:
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     case FLtlsdata:
 }
@@ -1930,7 +1930,8 @@ void getClibInfo(uint clib, Symbol **ps, ClibInfo **pinfo)
                               EX_FREEBSD | EX_FREEBSD64 |
                               EX_OPENBSD | EX_OPENBSD64 |
                               EX_DRAGONFLYBSD64 |
-                              EX_SOLARIS | EX_SOLARIS64);
+                              EX_SOLARIS   | EX_SOLARIS64 |
+                              EX_POWERNEX64);
 
     ClibInfo *cinfo = &clibinfo[clib];
     Symbol *s = clibsyms[clib];
@@ -1955,7 +1956,7 @@ void getClibInfo(uint clib, Symbol **ps, ClibInfo **pinfo)
                 break;
             case CLIB.ldiv:
                 cinfo.retregs16 = mDX|mAX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__divdi3", mAX|mBX|mCX|mDX);
                     cinfo.flags = INFpushebx;
@@ -1982,7 +1983,7 @@ void getClibInfo(uint clib, Symbol **ps, ClibInfo **pinfo)
                 break;
             case CLIB.lmod:
                 cinfo.retregs16 = mCX|mBX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__moddi3", mAX|mBX|mCX|mDX);
                     cinfo.flags = INFpushebx;
@@ -2009,7 +2010,7 @@ void getClibInfo(uint clib, Symbol **ps, ClibInfo **pinfo)
                 break;
             case CLIB.uldiv:
                 cinfo.retregs16 = mDX|mAX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__udivdi3", mAX|mBX|mCX|mDX);
                     cinfo.flags = INFpushebx;
@@ -2036,7 +2037,7 @@ void getClibInfo(uint clib, Symbol **ps, ClibInfo **pinfo)
                 break;
             case CLIB.ulmod:
                 cinfo.retregs16 = mCX|mBX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__umoddi3", mAX|mBX|mCX|mDX);
                     cinfo.flags = INFpushebx;
@@ -2609,7 +2610,7 @@ void callclib(ref CodeBuilder cdb,elem *e,uint clib,regm_t *pretregs,regm_t keep
         }
         if (pushebx)
         {
-            if (config.exe & (EX_LINUX | EX_LINUX64 | EX_FREEBSD | EX_FREEBSD64 | EX_DRAGONFLYBSD64))
+            if (config.exe & (EX_LINUX | EX_LINUX64 | EX_FREEBSD | EX_FREEBSD64 | EX_DRAGONFLYBSD64 | EX_POWERNEX64))
             {
                 cdb.gen1(0x50 + CX);                             // PUSH ECX
                 cdb.gen1(0x50 + BX);                             // PUSH EBX
@@ -2630,7 +2631,7 @@ void callclib(ref CodeBuilder cdb,elem *e,uint clib,regm_t *pretregs,regm_t keep
             cdb.gen1(0x50 + DX);                                 // PUSH EDX
             cdb.gen1(0x50 + AX);                                 // PUSH EAX
         }
-        if (config.exe & (EX_LINUX | EX_FREEBSD | EX_OPENBSD | EX_SOLARIS))
+        if (config.exe & (EX_LINUX | EX_FREEBSD | EX_OPENBSD | EX_SOLARIS | EX_POWERNEX64))
         {
             // Note: not for OSX
             /* Pass EBX on the stack instead, this is because EBX is used
@@ -3464,7 +3465,7 @@ static if (TARGET_WINDOS)
                 fl = el_fl(e1);
             if (tym1 == TYifunc)
                 cdbe.gen1(0x9C);                             // PUSHF
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
             assert(!farfunc);
             if (s != tls_get_addr_sym)
@@ -3506,7 +3507,7 @@ else
         tym_t e11ty = tybasic(e11.Ety);
         assert(!I16 || (e11ty == (farfunc ? TYfptr : TYnptr)));
         load_localgot(cdb);
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (config.flags3 & CFG3pic && I32)
             keepmsk |= mBX;
diff --git a/src/dmd/backend/cod2.d b/src/dmd/backend/cod2.d
index b483aaaa5..be00ce019 100644
--- a/src/dmd/backend/cod2.d
+++ b/src/dmd/backend/cod2.d
@@ -940,7 +940,7 @@ void cdmul(ref CodeBuilder cdb,elem *e,regm_t *pretregs)
             orthxmm(cdb,e,pretregs);
             return;
         }
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         orth87(cdb,e,pretregs);
 else
         opdouble(cdb,e,pretregs,(oper == OPmul) ? CLIB.dmul : CLIB.ddiv);
@@ -4225,7 +4225,7 @@ void getoffset(ref CodeBuilder cdb,elem *e,uint reg)
         goto L4;
 
     case FLtlsdata:
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     {
       L5:
@@ -4356,7 +4356,7 @@ else
         goto L4;
 
     case FLextern:
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (e.EV.Vsym.ty() & mTYthread)
             goto L5;
diff --git a/src/dmd/backend/cod3.d b/src/dmd/backend/cod3.d
index 45a6101bf..f483c64c4 100644
--- a/src/dmd/backend/cod3.d
+++ b/src/dmd/backend/cod3.d
@@ -664,7 +664,7 @@ regm_t regmask(tym_t tym, tym_t tyf)
             return mST0;
 
         case TYcfloat:
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
             if (I32 && tybasic(tyf) == TYnfunc)
                 return mDX | mAX;
@@ -1481,7 +1481,7 @@ void doswitch(ref CodeBuilder cdb, block *b)
         regm_t retregs = IDXREGS;
         if (dword)
             retregs |= mMSW;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (I32 && config.flags3 & CFG3pic)
             retregs &= ~mBX;                            // need EBX for GOT
@@ -1686,7 +1686,7 @@ else
             genjmp(cdb,JNE,FLblock,b.nthSucc(0)); // JNE default
         }
         getregs(cdb,mCX|mDI);
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (config.flags3 & CFG3pic)
         {   // Add in GOT
@@ -1762,7 +1762,7 @@ static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TAR
         const int mod = (disp > 127) ? 2 : 1;     // 1 or 2 byte displacement
         if (csseg)
             cdb.gen1(SEGCS);            // table is in code segment
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (config.flags3 & CFG3pic)
         {                               // ADD EDX,(ncases-1)*2[EDI]
@@ -1832,7 +1832,7 @@ void outjmptab(block *b)
                         break;
                 }
         }
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (I64)
         {
@@ -2402,7 +2402,7 @@ static if (TARGET_OSX)
 
     fixresult(cdb,e,retregs,pretregs);
 }
-else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     regm_t retregs = *pretregs & allregs;
     if  (!retregs)
@@ -2438,7 +2438,7 @@ else
 
 void load_localgot(ref CodeBuilder cdb)
 {
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     if (config.flags3 & CFG3pic && I32)
     {
@@ -2462,7 +2462,7 @@ static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYB
 }
 }
 
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
 /*****************************
  * Returns:
@@ -3068,7 +3068,7 @@ void prolog_frame(ref CodeBuilder cdb, uint farfunc, uint* xlocalsize, bool* ent
     if (config.wflags & WFincbp && farfunc)
         cdb.gen1(0x40 + BP);      // INC  BP
     if (config.target_cpu < TARGET_80286 ||
-        config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_DRAGONFLYBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_WIN64) ||
+        config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_DRAGONFLYBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_POWERNEX64 | EX_WIN64) ||
         !localsize ||
         config.flags & CFGstack ||
         (*xlocalsize >= 0x1000 && config.exe & EX_flat) ||
@@ -4362,7 +4362,7 @@ static if (0)
     sthunk.Soffset = thunkoffset;
     sthunk.Ssize = Offset(seg) - thunkoffset; // size of thunk
     sthunk.Sseg = seg;
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     objmod.pubdef(seg,sthunk,sthunk.Soffset);
 }
@@ -6661,7 +6661,7 @@ private void do64bit(MiniCodeBuf *pbuf, FL fl, evc *uev,int flags)
             // un-named external with is the start of .rodata or .data
         case FLextern:                      /* external data symbol         */
         case FLtlsdata:
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         case FLgot:
         case FLgotoff:
@@ -6778,7 +6778,7 @@ else
         // un-named external with is the start of .rodata or .data
     case FLextern:                      /* external data symbol         */
     case FLtlsdata:
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     case FLgot:
     case FLgotoff:
diff --git a/src/dmd/backend/cod4.d b/src/dmd/backend/cod4.d
index 26d687941..95a3a33b9 100644
--- a/src/dmd/backend/cod4.d
+++ b/src/dmd/backend/cod4.d
@@ -853,7 +853,7 @@ void cdaddass(ref CodeBuilder cdb,elem *e,regm_t *pretregs)
 
     if (tyfloating(tyml))
     {
-        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             if (op == OPnegass)
                 cdnegass87(cdb,e,pretregs);
@@ -1403,7 +1403,7 @@ void cdmulass(ref CodeBuilder cdb,elem *e,regm_t *pretregs)
 
     if (tyfloating(tyml))
     {
-        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             opass87(cdb,e,pretregs);
         }
@@ -2880,7 +2880,7 @@ void cdcnvt(ref CodeBuilder cdb,elem *e, regm_t *pretregs)
                     return;
                 }
                 static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD ||
-                           TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+                           TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
                 {
                     retregs = mST0;
                 }
diff --git a/src/dmd/backend/code_stub.h b/src/dmd/backend/code_stub.h
index 9738f0365..580c0ff12 100644
--- a/src/dmd/backend/code_stub.h
+++ b/src/dmd/backend/code_stub.h
@@ -49,7 +49,7 @@
 #define DOUBLEREGS_16 0
 #define BYTEREGS_INIT 0
 
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
 extern regm_t ALLREGS;
 extern regm_t BYTEREGS;
 #define ALLREGS_INIT            0
diff --git a/src/dmd/backend/code_x86.h b/src/dmd/backend/code_x86.h
index 472279e9f..be47a0958 100644
--- a/src/dmd/backend/code_x86.h
+++ b/src/dmd/backend/code_x86.h
@@ -125,7 +125,7 @@ enum
 extern regm_t ALLREGS;
 #undef BYTEREGS
 extern regm_t BYTEREGS;
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
     // To support positional independent code,
     // must be able to remove BX from available registers
 #define ALLREGS_INIT            (mAX|mBX|mCX|mDX|mSI|mDI)
diff --git a/src/dmd/backend/dwarf.c b/src/dmd/backend/dwarf.c
index 901dca585..2f69f3e64 100644
--- a/src/dmd/backend/dwarf.c
+++ b/src/dmd/backend/dwarf.c
@@ -39,7 +39,7 @@ application if debug info is needed when the application is deployed.
 #include        <malloc.h>
 #endif
 
-#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
 #include        <signal.h>
 #include        <unistd.h>
 #include        <errno.h>
diff --git a/src/dmd/backend/elem.d b/src/dmd/backend/elem.d
index 60aa10d2d..f63c45b3a 100644
--- a/src/dmd/backend/elem.d
+++ b/src/dmd/backend/elem.d
@@ -1297,7 +1297,7 @@ Lnodep:
 
 Symbol *el_alloc_localgot()
 {
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     /* Since localgot is a local variable to each function,
      * localgot must be set back to null
@@ -1481,7 +1481,7 @@ static if (1)
 }
 }
 
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
 
 elem *el_picvar(Symbol *s)
@@ -1677,14 +1677,14 @@ elem * el_var(Symbol *s)
 
     //printf("el_var(s = '%s')\n", s.Sident);
     //printf("%x\n", s.Stype.Tty);
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     if (config.flags3 & CFG3pic &&
         !tyfunc(s.ty()))
         // Position Independent Code
         return el_picvar(s);
 }
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     if (config.flags3 & CFG3pic && tyfunc(s.ty()))
     {
@@ -1715,7 +1715,7 @@ static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYB
 static if (TARGET_OSX)
 {
 }
-else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         /* For 32 bit:
          * Generate for var locals:
@@ -1840,7 +1840,7 @@ elem * el_var(Symbol *s)
 {   elem *e;
 
     //printf("el_var(s = '%s')\n", s.Sident);
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     if (config.flags3 & CFG3pic && !tyfunc(s.ty()))
         return el_picvar(s);
@@ -1945,7 +1945,7 @@ static if (TARGET_OSX)
     }
 }
 
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     if (config.flags3 & CFG3pic &&
         tyfunc(s.ty()))
diff --git a/src/dmd/backend/elfobj.c b/src/dmd/backend/elfobj.c
index c02f3a3f7..98db1dc68 100644
--- a/src/dmd/backend/elfobj.c
+++ b/src/dmd/backend/elfobj.c
@@ -56,6 +56,8 @@
 #  define ELFOSABI ELFOSABI_OPENBSD
 # elif TARGET_DRAGONFLYBSD
 #  define ELFOSABI ELFOSABI_SYSV
+# elif TARGET_POWERNEX
+#  define ELFOSABI ELFOSABI_SYSV
 # else
 #  error "No ELF OS ABI defined.  Please fix"
 # endif
@@ -84,7 +86,7 @@ void addSegmentToComdat(segidx_t seg, segidx_t comdatseg);
  * If set the compiler requires full druntime support of the new
  * section registration.
  */
-#define REQUIRE_DSO_REGISTRY (DMDV2 && (TARGET_LINUX || TARGET_FREEBSD || TARGET_DRAGONFLYBSD))
+#define REQUIRE_DSO_REGISTRY (DMDV2 && (TARGET_LINUX || TARGET_FREEBSD || TARGET_DRAGONFLYBSD || TARGET_POWERNEX))
 
 /******
  * FreeBSD uses ELF, but the linker crashes with Elf comdats with the following message:
@@ -2249,7 +2251,7 @@ char *obj_mangle2(Symbol *s,char *dest, size_t *destlen)
             }
             break;
         case mTYman_std:
-#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
             if (tyfunc(s->ty()) && !variadic(s->Stype))
 #else
             if (!(config.flags4 & CFG4oldstdmangle) &&
diff --git a/src/dmd/backend/global.d b/src/dmd/backend/global.d
index 76c06b6cb..8f14e54e8 100644
--- a/src/dmd/backend/global.d
+++ b/src/dmd/backend/global.d
@@ -530,7 +530,7 @@ void dwarf_CFA_set_reg_offset(int reg, int offset);
 void dwarf_CFA_offset(int reg, int offset);
 void dwarf_CFA_args_size(size_t sz);
 
-// TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+// TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
 elem *exp_isconst();
 elem *lnx_builtin_next_arg(elem *efunc,list_t arglist);
 char *lnx_redirect_funcname(const(char)*);
diff --git a/src/dmd/backend/global.h b/src/dmd/backend/global.h
index 645956fe8..488cb4189 100644
--- a/src/dmd/backend/global.h
+++ b/src/dmd/backend/global.h
@@ -491,7 +491,7 @@ void dwarf_CFA_set_reg_offset(int reg, int offset);
 void dwarf_CFA_offset(int reg, int offset);
 void dwarf_CFA_args_size(size_t sz);
 
-// TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+// TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
 elem *exp_isconst();
 elem *lnx_builtin_next_arg(elem *efunc,list_t arglist);
 char *lnx_redirect_funcname(const char *);
diff --git a/src/dmd/backend/machobj.c b/src/dmd/backend/machobj.c
index a5c52bb4c..0de70f97e 100644
--- a/src/dmd/backend/machobj.c
+++ b/src/dmd/backend/machobj.c
@@ -18,11 +18,11 @@
 #include        <fcntl.h>
 #include        <ctype.h>
 
-#if _WIN32 || __linux__
+#if _WIN32 || __linux__ || __PowerNex__
 #include        <malloc.h>
 #endif
 
-#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
 #include        <signal.h>
 #include        <unistd.h>
 #endif
@@ -2103,7 +2103,7 @@ char *obj_mangle2(Symbol *s,char *dest)
                 *p = toupper(*p);
             break;
         case mTYman_std:
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
             if (tyfunc(s->ty()) && !variadic(s->Stype))
 #else
             if (!(config.flags4 & CFG4oldstdmangle) &&
diff --git a/src/dmd/backend/nteh.d b/src/dmd/backend/nteh.d
index f80c6408a..2599d983b 100644
--- a/src/dmd/backend/nteh.d
+++ b/src/dmd/backend/nteh.d
@@ -358,7 +358,7 @@ void nteh_prolog(ref CodeBuilder cdb)
         /* An sindex value of -2 is a magic value that tells the
          * stack unwinder to skip this frame.
          */
-        assert(config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_OPENBSD | EX_OPENBSD64 | EX_DRAGONFLYBSD64));
+        assert(config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_OPENBSD | EX_OPENBSD64 | EX_DRAGONFLYBSD64 | EX_POWERNEX64));
         cs.Iop = 0x68;
         cs.Iflags = 0;
         cs.Irex = 0;
diff --git a/src/dmd/backend/obj.h b/src/dmd/backend/obj.h
index 8274989ce..6eae8cb09 100644
--- a/src/dmd/backend/obj.h
+++ b/src/dmd/backend/obj.h
@@ -24,7 +24,7 @@ struct seg_data;
 
 #if TARGET_WINDOS
 #define OMF 1
-#elif (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+#elif (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 #define ELF 1
 #elif TARGET_OSX
 #define MACH 1
@@ -108,7 +108,7 @@ struct seg_data;
 
         static void gotref(symbol *s);
 
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
         static unsigned addstr(Outbuffer *strtab, const char *);
         static symbol *getGOTsym();
         static void refGOTsym();
@@ -195,7 +195,7 @@ class Obj
 
     static void gotref(symbol *s);
 
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
     static unsigned addstr(Outbuffer *strtab, const char *);
     static symbol *getGOTsym();
     static void refGOTsym();
diff --git a/src/dmd/backend/optabgen.d b/src/dmd/backend/optabgen.d
index c4146fe8f..097594498 100644
--- a/src/dmd/backend/optabgen.d
+++ b/src/dmd/backend/optabgen.d
@@ -1030,7 +1030,7 @@ static if (TARGET_OSX)
 {
                 sz = 16;
 }
-else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
                 sz = 4;
 }
diff --git a/src/dmd/backend/os.c b/src/dmd/backend/os.c
index a0fae153c..bb64ce582 100644
--- a/src/dmd/backend/os.c
+++ b/src/dmd/backend/os.c
@@ -20,7 +20,7 @@
 #include <stdlib.h>
 #include <string.h>
 
-#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
@@ -628,7 +628,7 @@ int os_file_exists(const char *name)
     else
         result = 1;
     return result;
-#elif __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#elif __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
     struct stat buf;
 
     return stat(name,&buf) == 0;        /* file exists if stat succeeded */
@@ -705,7 +705,7 @@ char *file_8dot3name(const char *filename)
 
 int file_write(char *name, void *buffer, unsigned len)
 {
-#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
     int fd;
     ssize_t numwritten;
 
@@ -778,7 +778,7 @@ err:
 
 int file_createdirs(char *name)
 {
-#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
     return 1;
 #endif
 #if _WIN32
@@ -894,6 +894,18 @@ int os_critsecsize64()
 }
 #endif
 
+#if __PowerNex__
+int os_critsecsize32()
+{
+    return 4; // sizeof(pthread_mutex_t) on 32 bit
+}
+
+int os_critsecsize64()
+{
+    return 8; // sizeof(pthread_mutex_t) on 64 bit
+}
+#endif
+
 #if __APPLE__
 int os_critsecsize32()
 {
diff --git a/src/dmd/backend/out.d b/src/dmd/backend/out.d
index 3cf0db865..1433073d9 100644
--- a/src/dmd/backend/out.d
+++ b/src/dmd/backend/out.d
@@ -451,7 +451,7 @@ void dt_writeToObj(Obj objmod, dt_t *dt, int seg, ref targ_size_t offset)
                     objmod.reftocodeseg(seg,offset,dt.DTabytes);
                 else
                 {
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
                     objmod.reftodatseg(seg,offset,dt.DTabytes,dt.DTseg,flags);
 }
diff --git a/src/dmd/backend/strtold.c b/src/dmd/backend/strtold.c
index 9bd708149..fa1095b3b 100644
--- a/src/dmd/backend/strtold.c
+++ b/src/dmd/backend/strtold.c
@@ -19,7 +19,7 @@
 #include        <fenv.h>
 #include        <fltpnt.h>
 #endif
-#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
 #include        <errno.h>
 #endif
 
@@ -31,7 +31,7 @@ extern char * __cdecl __locale_decpoint;
 void __pascal __set_errno (int an_errno);
 #endif
 
-#if _WIN32 || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if _WIN32 || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
 
 #if 0
 /* This is for compilers that don't support hex float literals,
diff --git a/src/dmd/backend/token.h b/src/dmd/backend/token.h
index 0a017029e..13828ebf8 100644
--- a/src/dmd/backend/token.h
+++ b/src/dmd/backend/token.h
@@ -171,7 +171,7 @@ enum TK {
         TK_stdcall,
         TK_syscall,
         TK_try,
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
         TK_attribute,
         TK_extension,
         TK_format,
@@ -203,7 +203,7 @@ enum TK {
         TKandand,TKshl,TKshr,TKrcur,TKeq,TKaddass,TKminass,TKmulass,TKdivass,
         TKmodass,TKshrass,TKshlass,TKandass,TKxorass,TKorass,TKsemi,
         TKadd,TKellipsis,
-#if !TX86 || TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if !TX86 || TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
         TKdollar,
 #endif
 
diff --git a/src/dmd/backend/ty.d b/src/dmd/backend/ty.d
index 08cd485c6..df12e244a 100644
--- a/src/dmd/backend/ty.d
+++ b/src/dmd/backend/ty.d
@@ -184,7 +184,7 @@ enum
     mTYnothrow      = 0x00200000,    // nothrow function
 
     // Used only by C/C++ compiler
-//#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+//#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
     mTYnoret        = 0x01000000,    // function has no return
     mTYtransu       = 0x01000000,    // transparent union
 //#else
@@ -198,7 +198,7 @@ enum
     mTYsyscall      = 0x40000000,
     mTYjava         = 0x80000000,
 
-//#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+//#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
 //    mTYTFF          = 0xFE000000,
 //#else
     mTYTFF          = 0xFF000000,
diff --git a/src/dmd/backend/ty.h b/src/dmd/backend/ty.h
index b57944462..46a8c9046 100644
--- a/src/dmd/backend/ty.h
+++ b/src/dmd/backend/ty.h
@@ -180,7 +180,7 @@ enum
     mTYnothrow      = 0x00200000,    // nothrow function
 
     // Used only by C/C++ compiler
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
     mTYnoret        = 0x01000000,    // function has no return
     mTYtransu       = 0x01000000,    // transparent union
 #else
@@ -194,7 +194,7 @@ enum
     mTYsyscall      = 0x40000000,
     mTYjava         = 0x80000000,
 
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
     mTYTFF          = 0xFE000000,
 #else
     mTYTFF          = 0xFF000000,
@@ -319,7 +319,7 @@ inline unsigned tysimd(tym_t ty) { return tytab[ty & 0xFF] & TYFLsimd; }
 /* Array to give the 'relaxed' type for relaxed type checking   */
 extern unsigned char _tyrelax[];
 #define type_relax      (config.flags3 & CFG3relax)     // !=0 if relaxed type checking
-#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+#if TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
 #define type_semirelax  (config.flags3 & CFG3semirelax) // !=0 if semi-relaxed type checking
 #else
 #define type_semirelax  type_relax
diff --git a/src/dmd/cli.d b/src/dmd/cli.d
index e9c66437b..66e95032e 100644
--- a/src/dmd/cli.d
+++ b/src/dmd/cli.d
@@ -26,6 +26,7 @@ enum TargetOS
     freeBSD = 8,
     solaris = 16,
     dragonFlyBSD = 32,
+    powerNex = 64,
 }
 
 // Detect the current TargetOS
@@ -53,6 +54,10 @@ else version(Solaris)
 {
     private enum targetOS = TargetOS.solaris;
 }
+else version(PowerNex)
+{
+    private enum targetOS = TargetOS.powerNex;
+}
 else
 {
     private enum targetOS = TargetOS.all;
diff --git a/src/dmd/cond.d b/src/dmd/cond.d
index 8e5332d4b..0c5d1a7f6 100644
--- a/src/dmd/cond.d
+++ b/src/dmd/cond.d
@@ -575,6 +575,7 @@ extern (C++) final class VersionCondition : DVCondition
             case "Win32":
             case "Win64":
             case "linux":
+            case "PowerNex":
             case "OSX":
             case "iOS":
             case "TVOS":
diff --git a/src/dmd/dmsc.d b/src/dmd/dmsc.d
index d632fce84..c56ab474b 100644
--- a/src/dmd/dmsc.d
+++ b/src/dmd/dmsc.d
@@ -107,7 +107,8 @@ void backend_init()
              global.params.isFreeBSD ||
              global.params.isOpenBSD ||
              global.params.isDragonFlyBSD ||
-             global.params.isSolaris)
+             global.params.isSolaris ||
+             global.params.isPowerNex)
     {
         exe = params.pic == 0;
     }
diff --git a/src/dmd/e2ir.d b/src/dmd/e2ir.d
index 67efc12da..ae31d1a5f 100644
--- a/src/dmd/e2ir.d
+++ b/src/dmd/e2ir.d
@@ -289,7 +289,8 @@ private elem *callfunc(const ref Loc loc,
              irs.params.isOSX ||
              irs.params.isFreeBSD ||
              irs.params.isDragonFlyBSD ||
-             irs.params.isSolaris) && tf.linkage != LINK.d)
+             irs.params.isSolaris ||
+             irs.params.isPowerNex) && tf.linkage != LINK.d)
         {
                 // ehidden goes last on Linux/OSX C++
         }
diff --git a/src/dmd/globals.d b/src/dmd/globals.d
index 711693867..2b2f297ca 100644
--- a/src/dmd/globals.d
+++ b/src/dmd/globals.d
@@ -32,6 +32,7 @@ enum TARGET : bool
     Solaris      = xversion!`Solaris`,
     Windows      = xversion!`Windows`,
     DragonFlyBSD = xversion!`DragonFlyBSD`,
+    PowerNex = xversion!`PowerNex`,
 }
 
 enum CHECKENABLE : ubyte
@@ -107,6 +108,7 @@ struct Param
     bool is64bit = (size_t.sizeof == 8);  // generate 64 bit code; true by default for 64 bit dmd
     bool isLP64;            // generate code for LP64
     bool isLinux;           // generate code for linux
+    bool isPowerNex;        // generate code for PowerNex
     bool isOSX;             // generate code for Mac OSX
     bool isWindows;         // generate code for Windows
     bool isFreeBSD;         // generate code for FreeBSD
@@ -312,7 +314,7 @@ struct Global
         {
             obj_ext = "obj";
         }
-        else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
         {
             obj_ext = "o";
         }
@@ -324,7 +326,7 @@ struct Global
         {
             lib_ext = "lib";
         }
-        else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
         {
             lib_ext = "a";
         }
@@ -336,7 +338,7 @@ struct Global
         {
             dll_ext = "dll";
         }
-        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
         {
             dll_ext = "so";
         }
@@ -352,7 +354,7 @@ struct Global
         {
             run_noext = false;
         }
-        else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
         {
             // Allow 'script' D source files to have no extension.
             run_noext = true;
diff --git a/src/dmd/globals.h b/src/dmd/globals.h
index cc36b01a2..124d1c5cb 100644
--- a/src/dmd/globals.h
+++ b/src/dmd/globals.h
@@ -81,6 +81,7 @@ struct Param
     bool is64bit;       // generate 64 bit code
     bool isLP64;        // generate code for LP64
     bool isLinux;       // generate code for linux
+    bool isPowerNex;    // generate code for PowerNex
     bool isOSX;         // generate code for Mac OSX
     bool isWindows;     // generate code for Windows
     bool isFreeBSD;     // generate code for FreeBSD
diff --git a/src/dmd/glue.d b/src/dmd/glue.d
index 56d7bb78d..897ffadbd 100644
--- a/src/dmd/glue.d
+++ b/src/dmd/glue.d
@@ -1021,7 +1021,7 @@ void FuncDeclaration_toObjFile(FuncDeclaration fd, bool multiobj)
         pi++;
     }
 
-    if ((global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isDragonFlyBSD || global.params.isSolaris) &&
+    if ((global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex) &&
          fd.linkage != LINK.d && shidden && sthis)
     {
         /* swap shidden and sthis
@@ -1253,7 +1253,7 @@ void FuncDeclaration_toObjFile(FuncDeclaration fd, bool multiobj)
     }
 
     if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD ||
-        global.params.isDragonFlyBSD || global.params.isSolaris)
+        global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex)
     {
         // A hack to get a pointer to this function put in the .dtors segment
         if (fd.ident && memcmp(fd.ident.toChars(), "_STD".ptr, 4) == 0)
@@ -1289,7 +1289,7 @@ private void specialFunctions(Obj objmod, FuncDeclaration fd)
     if (fd.isMain() && onlyOneMain(fd.loc))
     {
         if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD ||
-            global.params.isOpenBSD || global.params.isDragonFlyBSD || global.params.isSolaris)
+            global.params.isOpenBSD || global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex)
         {
             objmod.external_def("_main");
         }
@@ -1309,7 +1309,7 @@ private void specialFunctions(Obj objmod, FuncDeclaration fd)
     else if (fd.isRtInit())
     {
         if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD ||
-            global.params.isOpenBSD || global.params.isDragonFlyBSD || global.params.isSolaris ||
+            global.params.isOpenBSD || global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex ||
             global.params.mscoff)
         {
             objmod.ehsections();   // initialize exception handling sections
diff --git a/src/dmd/lib.d b/src/dmd/lib.d
index 2f60681a1..a87a80138 100644
--- a/src/dmd/lib.d
+++ b/src/dmd/lib.d
@@ -28,7 +28,7 @@ static if (TARGET.Windows)
     import dmd.libomf;
     import dmd.libmscoff;
 }
-else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
 {
     import dmd.libelf;
 }
@@ -51,7 +51,7 @@ class Library
         {
             return (global.params.mscoff || global.params.is64bit) ? LibMSCoff_factory() : LibOMF_factory();
         }
-        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
         {
             return LibElf_factory();
         }
diff --git a/src/dmd/mars.d b/src/dmd/mars.d
index 4e2c7af1e..4f567f66c 100644
--- a/src/dmd/mars.d
+++ b/src/dmd/mars.d
@@ -287,6 +287,10 @@ private int tryMain(size_t argc, const(char)** argv)
             browse("http://dlang.org/dmd-dragonflybsd.html");
         }
         */
+        version (PowerNex)
+        {
+            browse("http://powernex.net/dmd");
+        }
         return EXIT_SUCCESS;
     }
 
@@ -318,7 +322,7 @@ private int tryMain(size_t argc, const(char)** argv)
     {
         global.params.pic = 1;
     }
-    static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+    static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
     {
         if (global.params.lib && global.params.dll)
             error(Loc.initial, "cannot mix -lib and -shared");
@@ -1062,7 +1066,7 @@ private void setDefaultLibrary()
             else
                 global.params.defaultlibname = "phobos";
         }
-        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
         {
             global.params.defaultlibname = "libphobos2.a";
         }
@@ -1104,6 +1108,8 @@ void setTarget(ref Param params)
         params.isSolaris = true;
     else static if (TARGET.DragonFlyBSD)
         params.isDragonFlyBSD = true;
+    else static if (TARGET.PowerNex)
+        params.isPowerNex = true;
     else
         static assert(0, "unknown TARGET");
 }
@@ -1181,6 +1187,13 @@ void addDefaultVersionIdentifiers(const ref Param params)
         VersionCondition.addPredefinedGlobalIdent("ELFv1");
         VersionCondition.addPredefinedGlobalIdent("CppRuntime_Sun");
     }
+    else static if (TARGET.PowerNex)
+    {
+        VersionCondition.addPredefinedGlobalIdent("Posix");
+        VersionCondition.addPredefinedGlobalIdent("PowerNex");
+        VersionCondition.addPredefinedGlobalIdent("ELFv1");
+        global.params.isPowerNex = true;
+    }
     else
     {
         assert(0);
@@ -1481,7 +1494,7 @@ private bool parseCommandLine(const ref Strings arguments, const size_t argc, re
             params.dll = true;
         else if (arg == "-fPIC")
         {
-            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 params.pic = 1;
             }
@@ -2127,7 +2140,7 @@ Modules createModules(ref Strings files, ref Strings libmodules)
                 libmodules.push(files[i]);
                 continue;
             }
-            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 if (FileName.equals(ext, global.dll_ext))
                 {
diff --git a/src/dmd/mars.h b/src/dmd/mars.h
index a5410a7f6..da374e910 100644
--- a/src/dmd/mars.h
+++ b/src/dmd/mars.h
@@ -36,6 +36,7 @@ Macros defined by the compiler, not the code:
         __OpenBSD__         OpenBSD
         __DragonFly__       DragonFlyBSD
         __sun               Solaris, OpenSolaris, SunOS, OpenIndiana, etc
+        __PowerNex__        PowerNex
 
 For the target systems, there are the target operating system and
 the target object file format:
@@ -48,6 +49,7 @@ the target object file format:
         TARGET_OPENBSD      Covers 32 and 64 bit OpenBSD
         TARGET_DRAGONFLYBSD Covers 64 bit DragonFlyBSD
         TARGET_SOLARIS      Covers 32 and 64 bit Solaris
+        TARGET_POWERNEX     Covers 64 bit PowerNex
 
     It is expected that the compiler for each platform will be able
     to generate 32 and 64 bit code from the same compiler binary.
diff --git a/src/dmd/root/object.h b/src/dmd/root/object.h
index 6be8b6938..7b54074eb 100644
--- a/src/dmd/root/object.h
+++ b/src/dmd/root/object.h
@@ -9,7 +9,7 @@
 
 #pragma once
 
-#define POSIX (__linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun)
+#define POSIX (__linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__)
 
 #include "dcompat.h"
 #include <stddef.h>
diff --git a/src/dmd/target.d b/src/dmd/target.d
index 37e6f29b1..6ccb42c16 100644
--- a/src/dmd/target.d
+++ b/src/dmd/target.d
@@ -129,7 +129,7 @@ struct Target
             ptrsize = 8;
             classinfosize = 0x98; // 152
         }
-        if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isDragonFlyBSD || global.params.isSolaris)
+        if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex)
         {
             realsize = 12;
             realpad = 2;
@@ -165,7 +165,7 @@ struct Target
             assert(0);
         if (global.params.is64bit)
         {
-            if (global.params.isLinux || global.params.isFreeBSD || global.params.isDragonFlyBSD || global.params.isSolaris)
+            if (global.params.isLinux || global.params.isFreeBSD || global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex)
             {
                 realsize = 16;
                 realpad = 6;
@@ -182,7 +182,7 @@ struct Target
             c_long_doublesize = 8;
 
         cppExceptions = global.params.isLinux || global.params.isFreeBSD ||
-            global.params.isDragonFlyBSD || global.params.isOSX;
+            global.params.isDragonFlyBSD || global.params.isPowerNex || global.params.isOSX;
     }
 
     /**
@@ -203,7 +203,7 @@ struct Target
             return Target.realalignsize;
         case Tcomplex32:
             if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isOpenBSD ||
-                global.params.isDragonFlyBSD || global.params.isSolaris)
+                global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex)
                 return 4;
             break;
         case Tint64:
@@ -212,7 +212,7 @@ struct Target
         case Timaginary64:
         case Tcomplex64:
             if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isOpenBSD ||
-                global.params.isDragonFlyBSD || global.params.isSolaris)
+                global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex)
                 return global.params.is64bit ? 8 : 4;
             break;
         default:
@@ -283,6 +283,11 @@ struct Target
             // sizeof(pthread_mutex_t) for Solaris.
             return 24;
         }
+        else if (global.params.isPowerNex)
+        {
+            // sizeof(pthread_mutex_t) for PowerNex.
+            return 8;
+        }
         assert(0);
     }
 
@@ -300,7 +305,7 @@ struct Target
             return Type.tchar.pointerTo();
         }
         else if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isDragonFlyBSD ||
-            global.params.isSolaris || global.params.isOSX)
+            global.params.isSolaris || global.params.isPowerNex || global.params.isOSX)
         {
             if (global.params.is64bit)
             {
@@ -441,7 +446,7 @@ struct Target
      */
     extern (C++) static const(char)* toCppMangle(Dsymbol s)
     {
-        static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.DragonFlyBSD || TARGET.Solaris)
+        static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.DragonFlyBSD || TARGET.Solaris || TARGET.PowerNex)
             return toCppMangleItanium(s);
         else static if (TARGET.Windows)
             return toCppMangleMSVC(s);
@@ -458,7 +463,7 @@ struct Target
      */
     extern (C++) static const(char)* cppTypeInfoMangle(ClassDeclaration cd)
     {
-        static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             return cppTypeInfoMangleItanium(cd);
         else static if (TARGET.Windows)
             return cppTypeInfoMangleMSVC(cd);
@@ -670,7 +675,7 @@ struct Target
         }
         else if ((global.params.isLinux || global.params.isOSX ||
                   global.params.isFreeBSD || global.params.isSolaris ||
-                  global.params.isDragonFlyBSD) &&
+                  global.params.isDragonFlyBSD || global.params.isPowerNex) &&
                  tf.linkage == LINK.c &&
                  tns.iscomplex())
         {
diff --git a/src/dmd/tk/filespec.c b/src/dmd/tk/filespec.c
index 12a6c1422..75b7cf505 100644
--- a/src/dmd/tk/filespec.c
+++ b/src/dmd/tk/filespec.c
@@ -25,7 +25,7 @@
 #include        <ctype.h>
 #endif
 
-#if M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
 #include        <stdlib.h>
 #include        <unistd.h>
 #endif
@@ -87,7 +87,7 @@ char * filespecaddpath(const char *path,const char *filename)
 /**********************/
 char * filespecrootpath(char *filespec)
 {
-#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
 #define DIRCHAR '/'
 #endif
 #if MSDOS || __OS2__ || __NT__ || _WIN32
@@ -112,7 +112,7 @@ char * filespecrootpath(char *filespec)
 #endif
 
     /* get current working directory path */
-#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
     cwd_t = (char *)getcwd(NULL, 256);
 #endif
 #if MSDOS || __OS2__ || __NT__ || _WIN32
@@ -134,7 +134,7 @@ char * filespecrootpath(char *filespec)
     if (cwd[strlen(cwd) - 1] == DIRCHAR)
         cwd[strlen(cwd) - 1] = '\0';
 #endif
-#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
     free(cwd_t);
 #endif
     p = filespec;
@@ -151,7 +151,7 @@ char * filespecrootpath(char *filespec)
             {
                 cwd_t = cwd;
                 cwd = (char *)mem_calloc(strlen(cwd_t) + 1 + strlen(p) + 1);
-#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
                 sprintf(cwd, "%s/%s", cwd_t, p);  /* add relative directory */
 #endif
 #if MSDOS || __OS2__ || __NT__ || _WIN32
@@ -172,7 +172,7 @@ char * filespecrootpath(char *filespec)
         {   /* ... save remaining string */
             cwd_t = cwd;
             cwd = (char *)mem_calloc(strlen(cwd_t) + 1 + strlen(p) + 1);
-#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if SUN || M_UNIX || M_XENIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
             sprintf(cwd, "%s/%s", cwd_t, p);  /* add relative directory */
 #endif
 #if MSDOS || __OS2__ || __NT__ || _WIN32
@@ -403,7 +403,7 @@ char * filespecbackup(const char *filespec)
 #if MSDOS || __OS2__ || __NT__ || _WIN32
     return filespecforceext(filespec,"BAK");
 #endif
-#if BSDUNIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if BSDUNIX || __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
     char *p,*f;
 
     /* Prepend .B to file name, if it isn't already there       */
diff --git a/src/dmd/tk/mem.c b/src/dmd/tk/mem.c
index f4f3b0bec..b0f13b460 100644
--- a/src/dmd/tk/mem.c
+++ b/src/dmd/tk/mem.c
@@ -329,7 +329,7 @@ static struct mem_debug
         11111,
         0,
         BEFOREVAL,
-#if !(__linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun)
+#if !(__linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__)
         AFTERVAL
 #endif
 };
@@ -845,7 +845,7 @@ void mem_init()
                 mem_numalloc = 0;
                 mem_maxalloc = 0;
                 mem_alloclist.Mnext = NULL;
-#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun
+#if __linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun || __PowerNex__
                 *(long *) &(mem_alloclist.data[0]) = AFTERVAL;
 #endif
 #endif
diff --git a/test/fail_compilation/reserved_version.d b/test/fail_compilation/reserved_version.d
index 050d8167c..67bbde21a 100644
--- a/test/fail_compilation/reserved_version.d
+++ b/test/fail_compilation/reserved_version.d
@@ -105,6 +105,7 @@ fail_compilation/reserved_version.d(206): Error: version identifier `CppRuntime_
 fail_compilation/reserved_version.d(207): Error: version identifier `CppRuntime_Gcc` is reserved and cannot be set
 fail_compilation/reserved_version.d(208): Error: version identifier `CppRuntime_Microsoft` is reserved and cannot be set
 fail_compilation/reserved_version.d(209): Error: version identifier `CppRuntime_Sun` is reserved and cannot be set
+fail_compilation/reserved_version.d(210): Error: version identifier `PowerNex` is reserved and cannot be set
 ---
 */
 
@@ -216,6 +217,7 @@ version = CppRuntime_DigitalMars;
 version = CppRuntime_Gcc;
 version = CppRuntime_Microsoft;
 version = CppRuntime_Sun;
+version = PowerNex;
 
 // This should work though
 debug = DigitalMars;
@@ -318,3 +320,4 @@ debug = all;
 debug = none;
 debug = D_P16;
 debug = MSP430;
+debug = PowerNex;
-- 
2.19.2

