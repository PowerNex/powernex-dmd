From 3ace159e983a39f9e14691ad2248143f8c5b7b37 Mon Sep 17 00:00:00 2001
From: Dan Printzell <xwildn00bx@gmail.com>
Date: Fri, 17 Jan 2020 01:46:53 +0100
Subject: [PATCH 1/4] Added PowerNex as target

Signed-off-by: Dan Printzell <xwildn00bx@gmail.com>
---
 src/dmd/astbase.d            |  2 +-
 src/dmd/backend/backconfig.d | 27 +++++++++++++++++++++++----
 src/dmd/backend/cdef.d       | 12 ++++++++----
 src/dmd/backend/cgcod.d      |  2 +-
 src/dmd/backend/cgelem.d     |  2 +-
 src/dmd/backend/cod1.d       | 25 +++++++++++++------------
 src/dmd/backend/cod2.d       |  6 +++---
 src/dmd/backend/cod3.d       | 24 ++++++++++++------------
 src/dmd/backend/cod4.d       |  6 +++---
 src/dmd/backend/code_x86.d   |  2 +-
 src/dmd/backend/elfobj.d     |  6 ++++--
 src/dmd/backend/elpicpie.d   | 14 +++++++-------
 src/dmd/backend/global.d     |  2 +-
 src/dmd/backend/machobj.d    |  2 +-
 src/dmd/backend/nteh.d       |  2 +-
 src/dmd/backend/out.d        |  2 +-
 src/dmd/backend/var.d        |  2 +-
 src/dmd/globals.d            | 10 ++++++----
 src/dmd/globals.h            |  1 +
 src/dmd/json.d               |  4 ++++
 src/dmd/lib.d                |  4 ++--
 src/dmd/mars.d               | 21 +++++++++++++++------
 src/dmd/target.d             | 31 ++++++++++++++++++-------------
 23 files changed, 128 insertions(+), 81 deletions(-)

diff --git a/src/dmd/astbase.d b/src/dmd/astbase.d
index e5b50ca12..8f2e47129 100644
--- a/src/dmd/astbase.d
+++ b/src/dmd/astbase.d
@@ -6527,7 +6527,7 @@ struct ASTBase
                 return Type.tchar.pointerTo();
             }
             else if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD  || global.params.isDragonFlyBSD ||
-                global.params.isSolaris || global.params.isOSX)
+                global.params.isSolaris || global.params.isOSX || global.params.isPowerNex)
             {
                 if (global.params.is64bit)
                 {
diff --git a/src/dmd/backend/backconfig.d b/src/dmd/backend/backconfig.d
index 30fb43ce6..16c64f50d 100644
--- a/src/dmd/backend/backconfig.d
+++ b/src/dmd/backend/backconfig.d
@@ -245,6 +245,25 @@ static if (TARGET_SOLARIS)
     config.objfmt = OBJ_ELF;
     config.ehmethod = useExceptions ? EHmethod.EH_DM : EHmethod.EH_NONE;
 }
+static if (TARGET_POWERNEX)
+{
+    // Based on TARGET_LINUX
+    // 32bit is not supported!
+    assert(model == 64);
+    config.exe = EX_POWERNEX64;
+    config.ehmethod = useExceptions ? EHmethod.EH_DWARF : EHmethod.EH_NONE;
+    config.fpxmmregs = true;
+    config.avx = avx;
+
+    config.flags |= CFGnoebp;
+    if (!exe)
+    {
+        config.flags3 |= CFG3pic;
+        config.flags |= CFGalwaysframe; // PIC needs a frame for TLS fixups
+    }
+    config.objfmt = OBJ_ELF;
+}
+
     config.flags2 |= CFG2nodeflib;      // no default library
     config.flags3 |= CFG3eseqds;
 static if (0)
@@ -394,7 +413,7 @@ void util_set32()
     _tysize[TYnullptr] = LONGSIZE;
     _tysize[TYnptr] = LONGSIZE;
     _tysize[TYnref] = LONGSIZE;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     _tysize[TYldouble] = 12;
     _tysize[TYildouble] = 12;
@@ -428,7 +447,7 @@ else
     _tyalignsize[TYnullptr] = LONGSIZE;
     _tyalignsize[TYnref] = LONGSIZE;
     _tyalignsize[TYnptr] = LONGSIZE;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     _tyalignsize[TYldouble] = 4;
     _tyalignsize[TYildouble] = 4;
@@ -480,7 +499,7 @@ void util_set64()
     _tysize[TYnullptr] = 8;
     _tysize[TYnptr] = 8;
     _tysize[TYnref] = 8;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_OSX)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_OSX || TARGET_POWERNEX)
 {
     _tysize[TYldouble] = 16;
     _tysize[TYildouble] = 16;
@@ -508,7 +527,7 @@ else
     _tyalignsize[TYnullptr] = 8;
     _tyalignsize[TYnptr] = 8;
     _tyalignsize[TYnref] = 8;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     _tyalignsize[TYldouble] = 16;
     _tyalignsize[TYildouble] = 16;
diff --git a/src/dmd/backend/cdef.d b/src/dmd/backend/cdef.d
index b98f4148d..7e826461b 100644
--- a/src/dmd/backend/cdef.d
+++ b/src/dmd/backend/cdef.d
@@ -40,7 +40,8 @@ version (XVERSION)
 {
     extern (D) template xversion(string s)
     {
-        enum xversion = mixin(`{ version (` ~ s ~ `) return true; else return false; }`)();
+        //enum xversion = mixin(`{ version (` ~ s ~ `) return true; else return false; }`)();
+        enum xversion = s == "PowerNex";
     }
 
     enum TARGET_LINUX   = xversion!`linux`;
@@ -50,6 +51,7 @@ version (XVERSION)
     enum TARGET_SOLARIS = xversion!`Solaris`;
     enum TARGET_WINDOS  = xversion!`Windows`;
     enum TARGET_DRAGONFLYBSD  = xversion!`DragonFlyBSD`;
+    enum TARGET_POWERNEX  = xversion!`PowerNex`;
 }
 
 
@@ -321,13 +323,13 @@ enum CV3 = 0;          // 1 means support CV3 debug format
 //#ifndef OMFOBJ
 //#define OMFOBJ          TARGET_WINDOS
 //#endif
-enum ELFOBJ = TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS;
+enum ELFOBJ = TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX;
 enum MACHOBJ = TARGET_OSX;
 
 version (XVERSION)
 {
     enum SYMDEB_CODEVIEW = TARGET_WINDOS;
-    enum SYMDEB_DWARF = TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_OSX;
+    enum SYMDEB_DWARF = TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_OSX || TARGET_POWERNEX;
 }
 
 //#define TOOLKIT_H
@@ -525,6 +527,7 @@ enum
     EX_OPENBSD      = 0x400000,
     EX_OPENBSD64    = 0x800000,
     EX_DRAGONFLYBSD64 = 0x1000000,
+    EX_POWERNEX64   = 0x2000000
 }
 
 
@@ -533,7 +536,8 @@ enum exefmt_t EX_flat = EX_OS2 | EX_WIN32 | EX_LINUX | EX_WIN64 | EX_LINUX64 |
                          EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 |
                          EX_OPENBSD | EX_OPENBSD64 |
                          EX_DRAGONFLYBSD64 |
-                         EX_SOLARIS | EX_SOLARIS64;
+                         EX_SOLARIS | EX_SOLARIS64 |
+                         EX_POWERNEX64;
 
 // All DOS executable types
 enum exefmt_t EX_dos =  EX_DOSX | EX_ZPM | EX_RATIONAL | EX_PHARLAP |
diff --git a/src/dmd/backend/cgcod.d b/src/dmd/backend/cgcod.d
index bda604f35..239f99870 100644
--- a/src/dmd/backend/cgcod.d
+++ b/src/dmd/backend/cgcod.d
@@ -2716,7 +2716,7 @@ reload:                                 /* reload result from memory    */
             cdrelconst(cdb,e,pretregs);
             break;
 
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         case OPgot:
             cdgot(cdb,e,pretregs);
diff --git a/src/dmd/backend/cgelem.d b/src/dmd/backend/cgelem.d
index 186589423..74b502850 100644
--- a/src/dmd/backend/cgelem.d
+++ b/src/dmd/backend/cgelem.d
@@ -5127,7 +5127,7 @@ static if (TARGET_WINDOS)
 
 }
 
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     assert(I64); // va_start is not an intrinsic on 32-bit
     // (OPva_start &va)
diff --git a/src/dmd/backend/cod1.d b/src/dmd/backend/cod1.d
index 949f8c241..37a7f3577 100644
--- a/src/dmd/backend/cod1.d
+++ b/src/dmd/backend/cod1.d
@@ -1441,7 +1441,7 @@ void getlvalue(ref CodeBuilder cdb,code *pcs,elem *e,regm_t keepmsk)
         case FLextern:
             if (s.Sident[0] == '_' && memcmp(s.Sident.ptr + 1,"tls_array".ptr,10) == 0)
             {
-                static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+                static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
                 {
                     assert(0);
                 }
@@ -1472,7 +1472,7 @@ void getlvalue(ref CodeBuilder cdb,code *pcs,elem *e,regm_t keepmsk)
         case FLcsdata:
         case FLgot:
         case FLgotoff:
-    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         case FLtlsdata:
     }
@@ -2091,7 +2091,8 @@ void getClibInfo(uint clib, Symbol** ps, ClibInfo** pinfo)
                           EX_FREEBSD | EX_FREEBSD64 |
                           EX_OPENBSD | EX_OPENBSD64 |
                           EX_DRAGONFLYBSD64 |
-                          EX_SOLARIS | EX_SOLARIS64);
+                          EX_SOLARIS | EX_SOLARIS64 |
+                          EX_POWERNEX64);
 
     ClibInfo* cinfo = &clibinfo[clib];
     Symbol* s = clibsyms[clib];
@@ -2118,7 +2119,7 @@ void getClibInfo(uint clib, Symbol** ps, ClibInfo** pinfo)
 
             case CLIB.ldiv:
                 cinfo.retregs16 = mDX|mAX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__divdi3", mAX|mBX|mCX|mDX);
                     cinfo.flags = INFpushebx;
@@ -2146,7 +2147,7 @@ void getClibInfo(uint clib, Symbol** ps, ClibInfo** pinfo)
 
             case CLIB.lmod:
                 cinfo.retregs16 = mCX|mBX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__moddi3", mAX|mBX|mCX|mDX);
                     cinfo.flags = INFpushebx;
@@ -2174,7 +2175,7 @@ void getClibInfo(uint clib, Symbol** ps, ClibInfo** pinfo)
 
             case CLIB.uldiv:
                 cinfo.retregs16 = mDX|mAX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__udivdi3", mAX|mBX|mCX|mDX);
                     cinfo.flags = INFpushebx;
@@ -2202,7 +2203,7 @@ void getClibInfo(uint clib, Symbol** ps, ClibInfo** pinfo)
 
             case CLIB.ulmod:
                 cinfo.retregs16 = mCX|mBX;
-                if (config.exe & (EX_LINUX | EX_FREEBSD))
+                if (config.exe & (EX_LINUX | EX_FREEBSD | EX_POWERNEX64))
                 {
                     s = symboly("__umoddi3", mAX|mBX|mCX|mDX);
                     cinfo.flags = INFpushebx;
@@ -2823,7 +2824,7 @@ void callclib(ref CodeBuilder cdb, elem* e, uint clib, regm_t* pretregs, regm_t
         }
         if (pushebx)
         {
-            if (config.exe & (EX_LINUX | EX_LINUX64 | EX_FREEBSD | EX_FREEBSD64 | EX_DRAGONFLYBSD64))
+            if (config.exe & (EX_LINUX | EX_LINUX64 | EX_FREEBSD | EX_FREEBSD64 | EX_DRAGONFLYBSD64 | EX_POWERNEX64))
             {
                 cdb.gen1(0x50 + CX);                             // PUSH ECX
                 cdb.gen1(0x50 + BX);                             // PUSH EBX
@@ -2844,7 +2845,7 @@ void callclib(ref CodeBuilder cdb, elem* e, uint clib, regm_t* pretregs, regm_t
             cdb.gen1(0x50 + DX);                                 // PUSH EDX
             cdb.gen1(0x50 + AX);                                 // PUSH EAX
         }
-        if (config.exe & (EX_LINUX | EX_FREEBSD | EX_OPENBSD | EX_SOLARIS))
+        if (config.exe & (EX_LINUX | EX_FREEBSD | EX_OPENBSD | EX_SOLARIS | EX_POWERNEX64))
         {
             // Note: not for OSX
             /* Pass EBX on the stack instead, this is because EBX is used
@@ -3157,7 +3158,7 @@ void cdfunc(ref CodeBuilder cdb, elem* e, regm_t* pretregs)
 
     /* Assume called function access statics
      */
-    if (config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_FREEBSD | EX_FREEBSD64) &&
+    if (config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_FREEBSD | EX_FREEBSD64 | EX_POWERNEX64) &&
         config.flags3 & CFG3pic)
         cgstate.accessedTLS = true;
 
@@ -3690,7 +3691,7 @@ private void funccall(ref CodeBuilder cdb, elem* e, uint numpara, uint numalign,
                 fl = el_fl(e1);
             if (tym1 == TYifunc)
                 cdbe.gen1(0x9C);                             // PUSHF
-            static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+            static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
             {
                 assert(!farfunc);
                 if (s != tls_get_addr_sym)
@@ -3732,7 +3733,7 @@ private void funccall(ref CodeBuilder cdb, elem* e, uint numpara, uint numalign,
         tym_t e11ty = tybasic(e11.Ety);
         assert(!I16 || (e11ty == (farfunc ? TYfptr : TYnptr)));
         load_localgot(cdb);
-        static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+        static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             if (config.flags3 & CFG3pic && I32)
                 keepmsk |= mBX;
diff --git a/src/dmd/backend/cod2.d b/src/dmd/backend/cod2.d
index a1fa87d07..ffd47687b 100644
--- a/src/dmd/backend/cod2.d
+++ b/src/dmd/backend/cod2.d
@@ -935,7 +935,7 @@ void cdmul(ref CodeBuilder cdb,elem *e,regm_t *pretregs)
             orthxmm(cdb,e,pretregs);
             return;
         }
-        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
             orth87(cdb,e,pretregs);
         else
             opdouble(cdb,e,pretregs,(oper == OPmul) ? CLIB.dmul : CLIB.ddiv);
@@ -4261,7 +4261,7 @@ void getoffset(ref CodeBuilder cdb,elem *e,reg_t reg)
             goto L4;
 
         case FLtlsdata:
-    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         {
           L5:
@@ -4397,7 +4397,7 @@ void getoffset(ref CodeBuilder cdb,elem *e,reg_t reg)
             goto L4;
 
         case FLextern:
-    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
             if (e.EV.Vsym.ty() & mTYthread)
                 goto L5;
diff --git a/src/dmd/backend/cod3.d b/src/dmd/backend/cod3.d
index 6465b4330..42bafc875 100644
--- a/src/dmd/backend/cod3.d
+++ b/src/dmd/backend/cod3.d
@@ -685,7 +685,7 @@ regm_t regmask(tym_t tym, tym_t tyf)
             return mST0;
 
         case TYcfloat:
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
             if (I32 && tybasic(tyf) == TYnfunc)
                 return mDX | mAX;
@@ -1505,7 +1505,7 @@ void doswitch(ref CodeBuilder cdb, block *b)
         regm_t retregs = IDXREGS;
         if (dword)
             retregs |= mMSW;
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (I32 && config.flags3 & CFG3pic)
             retregs &= ~mBX;                            // need EBX for GOT
@@ -1710,7 +1710,7 @@ else
             genjmp(cdb,JNE,FLblock,b.nthSucc(0)); // JNE default
         }
         getregs(cdb,mCX|mDI);
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (config.flags3 & CFG3pic)
         {   // Add in GOT
@@ -1786,7 +1786,7 @@ static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TAR
         const int mod = (disp > 127) ? 2 : 1;     // 1 or 2 byte displacement
         if (csseg)
             cdb.gen1(SEGCS);            // table is in code segment
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (config.flags3 & CFG3pic)
         {                               // ADD EDX,(ncases-1)*2[EDI]
@@ -1856,7 +1856,7 @@ void outjmptab(block *b)
                         break;
                 }
         }
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         if (I64)
         {
@@ -2471,7 +2471,7 @@ void cdgot(ref CodeBuilder cdb, elem *e, regm_t *pretregs)
 
         fixresult(cdb,e,retregs,pretregs);
     }
-    else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+    else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         regm_t retregs = *pretregs & allregs;
         if  (!retregs)
@@ -2507,7 +2507,7 @@ void cdgot(ref CodeBuilder cdb, elem *e, regm_t *pretregs)
 
 void load_localgot(ref CodeBuilder cdb)
 {
-    static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+    static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         if (config.flags3 & CFG3pic && I32)
         {
@@ -2531,7 +2531,7 @@ void load_localgot(ref CodeBuilder cdb)
     }
 }
 
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
 /*****************************
  * Returns:
@@ -3205,7 +3205,7 @@ void prolog_frame(ref CodeBuilder cdb, uint farfunc, uint* xlocalsize, bool* ent
     if (config.wflags & WFincbp && farfunc)
         cdb.gen1(0x40 + BP);      // INC  BP
     if (config.target_cpu < TARGET_80286 ||
-        config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_DRAGONFLYBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_WIN64) ||
+        config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_DRAGONFLYBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_WIN64 | EX_POWERNEX64) ||
         !localsize ||
         config.flags & CFGstack ||
         (*xlocalsize >= 0x1000 && config.exe & EX_flat) ||
@@ -4582,7 +4582,7 @@ static if (0)
     sthunk.Soffset = thunkoffset;
     sthunk.Ssize = Offset(seg) - thunkoffset; // size of thunk
     sthunk.Sseg = seg;
-    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         objmod.pubdef(seg,sthunk,sthunk.Soffset);
     }
@@ -7028,7 +7028,7 @@ private void do64bit(MiniCodeBuf *pbuf, FL fl, evc *uev,int flags)
             // un-named external with is the start of .rodata or .data
         case FLextern:                      /* external data symbol         */
         case FLtlsdata:
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         case FLgot:
         case FLgotoff:
@@ -7150,7 +7150,7 @@ private void do32bit(MiniCodeBuf *pbuf, FL fl, evc *uev,int flags, int val)
             // un-named external with is the start of .rodata or .data
         case FLextern:                      /* external data symbol         */
         case FLtlsdata:
-    static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+    static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         case FLgot:
         case FLgotoff:
diff --git a/src/dmd/backend/cod4.d b/src/dmd/backend/cod4.d
index 9f7c12f6b..f9100975c 100644
--- a/src/dmd/backend/cod4.d
+++ b/src/dmd/backend/cod4.d
@@ -854,7 +854,7 @@ void cdaddass(ref CodeBuilder cdb,elem *e,regm_t *pretregs)
 
     if (tyfloating(tyml))
     {
-        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             if (op == OPnegass)
                 cdnegass87(cdb,e,pretregs);
@@ -1407,7 +1407,7 @@ void cdmulass(ref CodeBuilder cdb,elem *e,regm_t *pretregs)
 
     if (tyfloating(tyml))
     {
-        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+        static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
         {
             opass87(cdb,e,pretregs);
         }
@@ -2884,7 +2884,7 @@ void cdcnvt(ref CodeBuilder cdb,elem *e, regm_t *pretregs)
                     return;
                 }
                 static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD ||
-                           TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+                           TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
                 {
                     retregs = mST0;
                 }
diff --git a/src/dmd/backend/code_x86.d b/src/dmd/backend/code_x86.d
index ce9fb5fa6..2c95b7abe 100644
--- a/src/dmd/backend/code_x86.d
+++ b/src/dmd/backend/code_x86.d
@@ -138,7 +138,7 @@ enum RMstore = (1 << 31);
 extern (C++) extern __gshared regm_t ALLREGS;
 extern (C++) extern __gshared regm_t BYTEREGS;
 
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     // To support positional independent code,
     // must be able to remove BX from available registers
diff --git a/src/dmd/backend/elfobj.d b/src/dmd/backend/elfobj.d
index f1f91a513..8f75d540c 100644
--- a/src/dmd/backend/elfobj.d
+++ b/src/dmd/backend/elfobj.d
@@ -65,6 +65,8 @@ else static if (TARGET_OPENBSD)
     enum ELFOSABI = ELFOSABI_OPENBSD;
 else static if (TARGET_DRAGONFLYBSD)
     enum ELFOSABI = ELFOSABI_SYSV;
+else static if (TARGET_POWERNEX)
+    enum ELFOSABI = ELFOSABI_SYSV;
 else
     static assert(0, "No ELF OS ABI defined.  Please fix");
 
@@ -95,7 +97,7 @@ static if (1)
     enum DMDV2 = true;
 else
     enum DMDV2 = false;
-enum REQUIRE_DSO_REGISTRY = (DMDV2 && (TARGET_LINUX || TARGET_FREEBSD || TARGET_DRAGONFLYBSD));
+enum REQUIRE_DSO_REGISTRY = (DMDV2 && (TARGET_LINUX || TARGET_FREEBSD || TARGET_DRAGONFLYBSD || TARGET_POWERNEX));
 
 /**
  * If set, produce .init_array/.fini_array instead of legacy .ctors/.dtors .
@@ -2213,7 +2215,7 @@ else
             break;
         case mTYman_std:
         {
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
             bool cond = (tyfunc(s.ty()) && !variadic(s.Stype));
 else
             bool cond = (!(config.flags4 & CFG4oldstdmangle) &&
diff --git a/src/dmd/backend/elpicpie.d b/src/dmd/backend/elpicpie.d
index 5d48f2e6a..1b91b7bec 100644
--- a/src/dmd/backend/elpicpie.d
+++ b/src/dmd/backend/elpicpie.d
@@ -68,7 +68,7 @@ elem * el_var(Symbol *s)
     elem *e;
     //printf("el_var(s = '%s')\n", s.Sident);
     //printf("%x\n", s.Stype.Tty);
-    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+    static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         if (config.flags3 & CFG3pie &&
             s.Stype.Tty & mTYthread)
@@ -79,7 +79,7 @@ elem * el_var(Symbol *s)
             return el_picvar(s);            // Position Independent Code
     }
 
-    static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+    static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         if (config.flags3 & CFG3pic && tyfunc(s.ty()))
         {
@@ -110,7 +110,7 @@ elem * el_var(Symbol *s)
 static if (TARGET_OSX)
 {
 }
-else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
         /* For 32 bit:
          * Generate for var locals:
@@ -231,7 +231,7 @@ elem * el_var(Symbol *s)
 
     //printf("el_var(s = '%s')\n", s.Sident);
     static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD ||
-               TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+               TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         if (config.flags3 & CFG3pic && !tyfunc(s.ty()))
             return el_picvar(s);
@@ -345,7 +345,7 @@ elem * el_ptr(Symbol *s)
     }
 
     static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD ||
-               TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+               TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     {
         if (config.flags3 & CFG3pie &&
             s.Stype.Tty & mTYthread)
@@ -417,7 +417,7 @@ elem * el_ptr(Symbol *s)
 
 private Symbol *el_alloc_localgot()
 {
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
     /* Since localgot is a local variable to each function,
      * localgot must be set back to null
@@ -615,7 +615,7 @@ private elem *el_pieptr(Symbol *s)
 }
 }
 
-static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
 
 private elem *el_picvar(Symbol *s)
diff --git a/src/dmd/backend/global.d b/src/dmd/backend/global.d
index 3342957d3..669b88d2b 100644
--- a/src/dmd/backend/global.d
+++ b/src/dmd/backend/global.d
@@ -532,7 +532,7 @@ void dwarf_CFA_set_reg_offset(int reg, int offset);
 void dwarf_CFA_offset(int reg, int offset);
 void dwarf_CFA_args_size(size_t sz);
 
-// TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS
+// TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX
 elem *exp_isconst();
 elem *lnx_builtin_next_arg(elem *efunc,list_t arglist);
 char *lnx_redirect_funcname(const(char)*);
diff --git a/src/dmd/backend/machobj.d b/src/dmd/backend/machobj.d
index 54c304930..e3f0289bb 100644
--- a/src/dmd/backend/machobj.d
+++ b/src/dmd/backend/machobj.d
@@ -2136,7 +2136,7 @@ else
             break;
         case mTYman_std:
         {
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
             bool cond = (tyfunc(s.ty()) && !variadic(s.Stype));
 else
             bool cond = (!(config.flags4 & CFG4oldstdmangle) &&
diff --git a/src/dmd/backend/nteh.d b/src/dmd/backend/nteh.d
index e5a0df0f5..7df7a8f70 100644
--- a/src/dmd/backend/nteh.d
+++ b/src/dmd/backend/nteh.d
@@ -361,7 +361,7 @@ void nteh_prolog(ref CodeBuilder cdb)
         /* An sindex value of -2 is a magic value that tells the
          * stack unwinder to skip this frame.
          */
-        assert(config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_OPENBSD | EX_OPENBSD64 | EX_DRAGONFLYBSD64));
+        assert(config.exe & (EX_LINUX | EX_LINUX64 | EX_OSX | EX_OSX64 | EX_FREEBSD | EX_FREEBSD64 | EX_SOLARIS | EX_SOLARIS64 | EX_OPENBSD | EX_OPENBSD64 | EX_DRAGONFLYBSD64 | EX_POWERNEX64));
         cs.Iop = 0x68;
         cs.Iflags = 0;
         cs.Irex = 0;
diff --git a/src/dmd/backend/out.d b/src/dmd/backend/out.d
index 606bf9bbb..06cae2b08 100644
--- a/src/dmd/backend/out.d
+++ b/src/dmd/backend/out.d
@@ -452,7 +452,7 @@ void dt_writeToObj(Obj objmod, dt_t *dt, int seg, ref targ_size_t offset)
                     objmod.reftocodeseg(seg,offset,dt.DTabytes);
                 else
                 {
-static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+static if (TARGET_LINUX || TARGET_OSX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
 {
                     objmod.reftodatseg(seg,offset,dt.DTabytes,dt.DTseg,flags);
 }
diff --git a/src/dmd/backend/var.d b/src/dmd/backend/var.d
index 98b1d9aa7..4777d93c2 100644
--- a/src/dmd/backend/var.d
+++ b/src/dmd/backend/var.d
@@ -854,7 +854,7 @@ __gshared byte[256] _tysize =
 // Alignment of long doubles varies by target
 static if (TARGET_OSX)
     enum LDOUBLE_ALIGN = 16;
-else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS)
+else static if (TARGET_LINUX || TARGET_FREEBSD || TARGET_OPENBSD || TARGET_DRAGONFLYBSD || TARGET_SOLARIS || TARGET_POWERNEX)
     enum LDOUBLE_ALIGN = 4;
 else static if (TARGET_WINDOS)
     enum LDOUBLE_ALIGN = 2;
diff --git a/src/dmd/globals.d b/src/dmd/globals.d
index 25350edc5..d8e5c80a7 100644
--- a/src/dmd/globals.d
+++ b/src/dmd/globals.d
@@ -32,6 +32,7 @@ enum TARGET : bool
     Solaris      = xversion!`Solaris`,
     Windows      = xversion!`Windows`,
     DragonFlyBSD = xversion!`DragonFlyBSD`,
+    PowerNex = xversion!`PowerNex`,
 }
 
 enum DiagnosticReporting : ubyte
@@ -137,6 +138,7 @@ extern (C++) struct Param
     bool isOpenBSD;         // generate code for OpenBSD
     bool isDragonFlyBSD;    // generate code for DragonFlyBSD
     bool isSolaris;         // generate code for Solaris
+    bool isPowerNex;        // generate code for PowerNex
     bool hasObjectiveC;     // target supports Objective-C
     bool mscoff = false;    // for Win32: write MsCoff object files instead of OMF
     DiagnosticReporting useDeprecated = DiagnosticReporting.inform;  // how use of deprecated features are handled
@@ -367,7 +369,7 @@ extern (C++) struct Global
             {
                 obj_ext = "obj";
             }
-            else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 obj_ext = "o";
             }
@@ -379,7 +381,7 @@ extern (C++) struct Global
             {
                 lib_ext = "lib";
             }
-            else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 lib_ext = "a";
             }
@@ -391,7 +393,7 @@ extern (C++) struct Global
             {
                 dll_ext = "dll";
             }
-            else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 dll_ext = "so";
             }
@@ -407,7 +409,7 @@ extern (C++) struct Global
             {
                 run_noext = false;
             }
-            else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            else static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 // Allow 'script' D source files to have no extension.
                 run_noext = true;
diff --git a/src/dmd/globals.h b/src/dmd/globals.h
index 2c77ced9c..fc3d13b56 100644
--- a/src/dmd/globals.h
+++ b/src/dmd/globals.h
@@ -114,6 +114,7 @@ struct Param
     bool isOpenBSD;     // generate code for OpenBSD
     bool isDragonFlyBSD;// generate code for DragonFlyBSD
     bool isSolaris;     // generate code for Solaris
+    bool isPowerNex;    // generate code for PowerNex
     bool hasObjectiveC; // target supports Objective-C
     bool mscoff;        // for Win32: write COFF object files instead of OMF
     Diagnostic useDeprecated;
diff --git a/src/dmd/json.d b/src/dmd/json.d
index e677cbaed..f70617f90 100644
--- a/src/dmd/json.d
+++ b/src/dmd/json.d
@@ -861,6 +861,10 @@ public:
                 item("solaris");
                 item("bsd");
             }
+            else if (global.params.isPowerNex)
+            {
+                item("powernex");
+            }
         }
         arrayEnd();
 
diff --git a/src/dmd/lib.d b/src/dmd/lib.d
index 0dc019297..793402fbc 100644
--- a/src/dmd/lib.d
+++ b/src/dmd/lib.d
@@ -28,7 +28,7 @@ static if (TARGET.Windows)
     import dmd.libomf;
     import dmd.libmscoff;
 }
-else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
 {
     import dmd.libelf;
 }
@@ -51,7 +51,7 @@ class Library
         {
             return (global.params.mscoff || global.params.is64bit) ? LibMSCoff_factory() : LibOMF_factory();
         }
-        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
         {
             return LibElf_factory();
         }
diff --git a/src/dmd/mars.d b/src/dmd/mars.d
index c267900ef..8c3d432fb 100644
--- a/src/dmd/mars.d
+++ b/src/dmd/mars.d
@@ -1108,7 +1108,7 @@ private void setDefaultLibrary()
             else
                 global.params.defaultlibname = "phobos";
         }
-        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        else static if (TARGET.Linux || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
         {
             global.params.defaultlibname = "libphobos2.a";
         }
@@ -1150,6 +1150,8 @@ void setTarget(ref Param params)
         params.isSolaris = true;
     else static if (TARGET.DragonFlyBSD)
         params.isDragonFlyBSD = true;
+    else static if (TARGET.PowerNex)
+        params.isPowerNex = true;
     else
         static assert(0, "unknown TARGET");
 }
@@ -1227,6 +1229,13 @@ void addDefaultVersionIdentifiers(const ref Param params)
         VersionCondition.addPredefinedGlobalIdent("ELFv1");
         VersionCondition.addPredefinedGlobalIdent("CppRuntime_Sun");
     }
+    else if (params.isPowerNex)
+    {
+        VersionCondition.addPredefinedGlobalIdent("Posix");
+        VersionCondition.addPredefinedGlobalIdent("PowerNex");
+        VersionCondition.addPredefinedGlobalIdent("ELFv1");
+        //VersionCondition.addPredefinedGlobalIdent("CppRuntime_Clang");
+    }
     else
     {
         assert(0);
@@ -1733,7 +1742,7 @@ bool parseCommandLine(const ref Strings arguments, const size_t argc, ref Param
             params.dll = true;
         else if (arg == "-fPIC")
         {
-            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 params.pic = PIC.pic;
             }
@@ -1744,7 +1753,7 @@ bool parseCommandLine(const ref Strings arguments, const size_t argc, ref Param
         }
         else if (arg == "-fPIE")
         {
-            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 params.pic = PIC.pie;
             }
@@ -2146,7 +2155,7 @@ bool parseCommandLine(const ref Strings arguments, const size_t argc, ref Param
         else if (startsWith(p + 1, "Xcc="))
         {
             // Linking code is guarded by version (Posix):
-            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 params.linkswitches.push(p + 5);
                 params.linkswitchIsForCC.push(true);
@@ -2467,7 +2476,7 @@ private void reconcileCommands(ref Param params, size_t numSrcFiles)
     {
         params.pic = PIC.pic;
     }
-    static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+    static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
     {
         if (params.lib && params.dll)
             error(Loc.initial, "cannot mix -lib and -shared");
@@ -2643,7 +2652,7 @@ Modules createModules(ref Strings files, ref Strings libmodules)
                 libmodules.push(files[i]);
                 continue;
             }
-            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+            static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             {
                 if (FileName.equals(ext, global.dll_ext))
                 {
diff --git a/src/dmd/target.d b/src/dmd/target.d
index 78eb73372..26d61e119 100644
--- a/src/dmd/target.d
+++ b/src/dmd/target.d
@@ -120,7 +120,7 @@ extern (C++) struct Target
             ptrsize = 8;
             classinfosize = 0x98; // 152
         }
-        if (params.isLinux || params.isFreeBSD || params.isOpenBSD || params.isDragonFlyBSD || params.isSolaris)
+        if (params.isLinux || params.isFreeBSD || params.isOpenBSD || params.isDragonFlyBSD || params.isSolaris || params.isPowerNex)
         {
             realsize = 12;
             realpad = 2;
@@ -149,7 +149,7 @@ extern (C++) struct Target
             assert(0);
         if (params.is64bit)
         {
-            if (params.isLinux || params.isFreeBSD || params.isDragonFlyBSD || params.isSolaris)
+            if (params.isLinux || params.isFreeBSD || params.isDragonFlyBSD || params.isSolaris || params.isPowerNex)
             {
                 realsize = 16;
                 realpad = 6;
@@ -191,7 +191,7 @@ extern (C++) struct Target
             return target.realalignsize;
         case Tcomplex32:
             if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isOpenBSD ||
-                global.params.isDragonFlyBSD || global.params.isSolaris)
+                global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex)
                 return 4;
             break;
         case Tint64:
@@ -200,7 +200,7 @@ extern (C++) struct Target
         case Timaginary64:
         case Tcomplex64:
             if (global.params.isLinux || global.params.isOSX || global.params.isFreeBSD || global.params.isOpenBSD ||
-                global.params.isDragonFlyBSD || global.params.isSolaris)
+                global.params.isDragonFlyBSD || global.params.isSolaris || global.params.isPowerNex)
                 return global.params.is64bit ? 8 : 4;
             break;
         default:
@@ -250,7 +250,7 @@ extern (C++) struct Target
             return Type.tchar.pointerTo();
         }
         else if (global.params.isLinux || global.params.isFreeBSD || global.params.isOpenBSD || global.params.isDragonFlyBSD ||
-            global.params.isSolaris || global.params.isOSX)
+            global.params.isSolaris || global.params.isOSX || global.params.isPowerNex)
         {
             if (global.params.is64bit)
             {
@@ -543,7 +543,7 @@ extern (C++) struct Target
         }
         else if ((global.params.isLinux || global.params.isOSX ||
                   global.params.isFreeBSD || global.params.isSolaris ||
-                  global.params.isDragonFlyBSD) &&
+                  global.params.isDragonFlyBSD || global.params.isPowerNex) &&
                  tf.linkage == LINK.c &&
                  tns.iscomplex())
         {
@@ -668,7 +668,8 @@ extern (C++) struct Target
             || global.params.isFreeBSD
             || global.params.isOpenBSD
             || global.params.isDragonFlyBSD
-            || global.params.isSolaris;
+            || global.params.isSolaris
+            || global.params.isPowerNex;
     }
 }
 
@@ -684,7 +685,7 @@ struct TargetC
 
     extern (D) void initialize(ref const Param params, ref const Target target)
     {
-        if (params.isLinux || params.isFreeBSD || params.isOpenBSD || params.isDragonFlyBSD || params.isSolaris)
+        if (params.isLinux || params.isFreeBSD || params.isOpenBSD || params.isDragonFlyBSD || params.isSolaris || global.params.isPowerNex)
             longsize = 4;
         else if (params.isOSX)
             longsize = 4;
@@ -694,7 +695,7 @@ struct TargetC
             assert(0);
         if (params.is64bit)
         {
-            if (params.isLinux || params.isFreeBSD || params.isDragonFlyBSD || params.isSolaris)
+            if (params.isLinux || params.isFreeBSD || params.isDragonFlyBSD || params.isSolaris || global.params.isPowerNex)
                 longsize = 8;
             else if (params.isOSX)
                 longsize = 8;
@@ -747,6 +748,10 @@ struct TargetC
             // sizeof(pthread_mutex_t) for Solaris.
             return 24;
         }
+        else if (params.isPowerNex)
+        {
+            return 40; // TODO: Fix
+        }
         assert(0);
     }
 }
@@ -763,7 +768,7 @@ struct TargetCPP
 
     extern (D) void initialize(ref const Param params, ref const Target target)
     {
-        if (params.isLinux || params.isFreeBSD || params.isOpenBSD || params.isDragonFlyBSD || params.isSolaris)
+        if (params.isLinux || params.isFreeBSD || params.isOpenBSD || params.isDragonFlyBSD || params.isSolaris || params.isPowerNex)
             twoDtorInVtable = true;
         else if (params.isOSX)
             twoDtorInVtable = true;
@@ -772,7 +777,7 @@ struct TargetCPP
         else
             assert(0);
         exceptions = params.isLinux || params.isFreeBSD ||
-            params.isDragonFlyBSD || params.isOSX;
+            params.isDragonFlyBSD || params.isOSX || params.isPowerNex;
     }
 
     /**
@@ -784,7 +789,7 @@ struct TargetCPP
      */
     extern (C++) const(char)* toMangle(Dsymbol s)
     {
-        static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.DragonFlyBSD || TARGET.Solaris)
+        static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.DragonFlyBSD || TARGET.Solaris || TARGET.PowerNex)
             return toCppMangleItanium(s);
         else static if (TARGET.Windows)
             return toCppMangleMSVC(s);
@@ -801,7 +806,7 @@ struct TargetCPP
      */
     extern (C++) const(char)* typeInfoMangle(ClassDeclaration cd)
     {
-        static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD)
+        static if (TARGET.Linux || TARGET.OSX || TARGET.FreeBSD || TARGET.OpenBSD || TARGET.Solaris || TARGET.DragonFlyBSD || TARGET.PowerNex)
             return cppTypeInfoMangleItanium(cd);
         else static if (TARGET.Windows)
             return cppTypeInfoMangleMSVC(cd);
-- 
2.24.1

